#ifndef _GC2035_CFG_H_
#define _GC2035_CFG_H_

#include "rda_sensor.h"
#include <linux/delay.h>

#ifdef BIT
#undef BIT
#endif
#define BIT	8

static struct sensor_reg exp_gc2035[][3] =
{
	{{0xfe,0x01,BIT,0},{0x13,0x50,BIT,0},{0xfe,0x00,BIT,0}},
	{{0xfe,0x01,BIT,0},{0x13,0x60,BIT,0},{0xfe,0x00,BIT,0}},
	{{0xfe,0x01,BIT,0},{0x13,0x70,BIT,0},{0xfe,0x00,BIT,0}},
	{{0xfe,0x01,BIT,0},{0x13,0x78,BIT,0},{0xfe,0x00,BIT,0}},
	{{0xfe,0x01,BIT,0},{0x13,0x80,BIT,0},{0xfe,0x00,BIT,0}},
	{{0xfe,0x01,BIT,0},{0x13,0x90,BIT,0},{0xfe,0x00,BIT,0}},
	{{0xfe,0x01,BIT,0},{0x13,0xa0,BIT,0},{0xfe,0x00,BIT,0}},
};

static struct sensor_reg awb_gc2035[][4] =
{
	{{0x82,0xfc,BIT,0},{0xb3,0x61,BIT,0},{0xb4,0x40,BIT,0},{0xb5,0x61,BIT,0}},//OFF
	{{0x82,0xfe,BIT,0},{0xb3,0x61,BIT,0},{0xb4,0x40,BIT,0},{0xb5,0x61,BIT,0}},//AUTO
	{{0x82,0xfc,BIT,0},{0xb3,0x50,BIT,0},{0xb4,0x40,BIT,0},{0xb5,0xa8,BIT,0}},//INCANDESCENT
	{{0x82,0xfc,BIT,0},{0xb3,0x4e,BIT,0},{0xb4,0x40,BIT,0},{0xb5,0x72,BIT,0}},//FLUORESCENT
	{{0x82,0xfc,BIT,0},{0xb3,0xa0,BIT,0},{0xb4,0x45,BIT,0},{0xb5,0x40,BIT,0}},//TUNGSTEN
	{{0x82,0xfc,BIT,0},{0xb3,0x70,BIT,0},{0xb4,0x40,BIT,0},{0xb5,0x50,BIT,0}},//DAYLIGHT
	{{0x82,0xfc,BIT,0},{0xb3,0x58,BIT,0},{0xb4,0x40,BIT,0},{0xb5,0x50,BIT,0}},//CLOUD
};

// use this for 1600x1200 (UXGA) capture
static struct sensor_reg uxga_gc2035[] =
{
	{0xfe,0x00,BIT,0},
	{0xfa,0x11,BIT,0},
	{0xc8,0x00,BIT,0},

	{0x99,0x11,BIT,0},
	{0x9a,0x06,BIT,0},
	{0x9b,0x00,BIT,0},
	{0x9c,0x00,BIT,0},
	{0x9d,0x00,BIT,0},
	{0x9e,0x00,BIT,0},
	{0x9f,0x00,BIT,0},
	{0xa0,0x00,BIT,0},
	{0xa1,0x00,BIT,0},
	{0xa2,0x00,BIT,0},
	{0x0a,0x00,BIT,0},

	{0x90,0x01,BIT,0},
	{0x95,0x04,BIT,0}, //1200=4b0h
	{0x96,0xb0,BIT,0},
	{0x97,0x06,BIT,0}, //1600=640h
	{0x98,0x40,BIT,0},

	{0xfe,0x03,BIT,0},
	{0x13,0x0c,BIT,0},
	{0x12,0x80,BIT,0},
	{0x05,0x00,BIT,0},
	{0x04,0x20,BIT,0},
//	{0x10,0x94,BIT,0},
	{0xfe,0x00,BIT,0},
};

// use this for 640x480 (VGA) capture
static struct sensor_reg vga_gc2035[] =
{
	{0xfe,0x00,BIT,0},
	{0xc8,0x00,BIT,0},
	{0xfa,0x00,BIT,0},

	{0x99,0x22,BIT,0},
	{0x9a,0x06,BIT,0},
	{0x9b,0x00,BIT,0},
	{0x9c,0x00,BIT,0},
	{0x9d,0x00,BIT,0},
	{0x9e,0x00,BIT,0},
	{0x9f,0x02,BIT,0},
	{0xa0,0x00,BIT,0},
	{0xa1,0x00,BIT,0},
	{0xa2,0x00,BIT,0},
	{0x0a,0x00,BIT,0},

	{0x90,0x01,BIT,0},
	{0x95,0x01,BIT,0},
	{0x96,0xe0,BIT,0},
	{0x97,0x02,BIT,0},
	{0x98,0x80,BIT,0},

	{0xfe,0x03,BIT,0},
	{0x13,0x05,BIT,0},
	{0x12,0x00,BIT,0},
	{0x05,0x00,BIT,0},
	{0x04,0x90,BIT,0},
	{0xfe,0x00,BIT,0},
};

// use this for 320x240 (QVGA) capture
static struct sensor_reg qvga_gc2035[] =
{
	{0xfe,0x00,BIT,0},
	{0xfa,0x00,BIT,0},
	{0xc8,0x00,BIT,0},

	{0x99,0x44,BIT,0},
	{0x9a,0x06,BIT,0},
	{0x9b,0x00,BIT,0},
	{0x9c,0x00,BIT,0},
	{0x9d,0x00,BIT,0},
	{0x9e,0x00,BIT,0},
	{0x9f,0x00,BIT,0},
	{0xa0,0x00,BIT,0},
	{0xa1,0x00,BIT,0},
	{0xa2,0x00,BIT,0},
	{0x0a,0x00,BIT,0},

	{0x90,0x01,BIT,0},
	{0x95,0x00,BIT,0},
	{0x96,0xf0,BIT,0},
	{0x97,0x01,BIT,0},
	{0x98,0x40,BIT,0},

	{0xfe,0x03,BIT,0},
	{0x13,0x02,BIT,0},
	{0x12,0x80,BIT,0},
	{0x05,0x00,BIT,0},
	{0x04,0x48,BIT,0},
	{0xfe,0x00,BIT,0},

};

// use this for 160x120 (QQVGA) capture
static struct sensor_reg qqvga_gc2035[] =
{
	{0xfe,0x00,BIT,0},
	{0xfa,0x00,BIT,0},
	{0xc8,0x00,BIT,0},

	{0x99,0x88,BIT,0},
	{0x9a,0x06,BIT,0},
	{0x9b,0x00,BIT,0},
	{0x9c,0x00,BIT,0},
	{0x9d,0x00,BIT,0},
	{0x9e,0x00,BIT,0},
	{0x9f,0x00,BIT,0},
	{0xa0,0x00,BIT,0},
	{0xa1,0x00,BIT,0},
	{0xa2,0x00,BIT,0},
	{0x0a,0x00,BIT,0},

	{0x90,0x01,BIT,0},
	{0x95,0x00,BIT,0},
	{0x96,0x78,BIT,0},
	{0x97,0x00,BIT,0},
	{0x98,0xa0,BIT,0},

	{0xfe,0x03,BIT,0},
	{0x13,0x01,BIT,0},
	{0x12,0x40,BIT,0},
	{0x05,0x00,BIT,0},
	{0x04,0x24,BIT,0},
	{0xfe,0x00,BIT,0},
};

// use this for 176x144 (QCIF) capture
static struct sensor_reg qcif_gc2035[] =
{
	{0xfe,0x00,BIT,0},
	{0xfa,0x00,BIT,0},
	{0xc8,0x00,BIT,0},

	{0x99,0x88,BIT,0},
	{0x9a,0x06,BIT,0},
	{0x9b,0x00,BIT,0},
	{0x9c,0x00,BIT,0},
	{0x9d,0x00,BIT,0},
	{0x9e,0x00,BIT,0},
	{0x9f,0x00,BIT,0},
	{0xa0,0x00,BIT,0},
	{0xa1,0x00,BIT,0},
	{0xa2,0x00,BIT,0},
	{0x0a,0x00,BIT,0},

	{0x90,0x01,BIT,0},
	{0x95,0x00,BIT,0},
	{0x96,0x90,BIT,0},
	{0x97,0x00,BIT,0},
	{0x98,0xb0,BIT,0},

	{0xfe,0x03,BIT,0},
	{0x13,0x01,BIT,0},
	{0x12,0x60,BIT,0},
	{0x05,0x00,BIT,0},
	{0x04,0x24,BIT,0},
	{0xfe,0x00,BIT,0},
};

// use this for init sensor
static struct sensor_reg init_gc2035[] =
{
	{0xfe,0x80,BIT,0},
	{0xfe,0x80,BIT,0},
	{0xfe,0x80,BIT,0},
	{0xfc,0x06,BIT,0},
	{0xf9,0xfe,BIT,0},
	{0xf6,0x00,BIT,0},

	{0xf7,0x05,BIT,0},
	{0xf8,0x84,BIT,0},//0x85
	{0xfa,0x00,BIT,0},

	{0xfe,0x00,BIT,0},
	{0x82,0x00,BIT,0},
	{0xb3,0x60,BIT,0},
	{0xb4,0x40,BIT,0},
	{0xb5,0x60,BIT,0},
	{0x03,0x05,BIT,0},
	{0x04,0x08,BIT,0},
	{0xfe,0x00,BIT,0},
	{0xec,0x04,BIT,0},
	{0xed,0x04,BIT,0},
	{0xee,0x60,BIT,0},
	{0xef,0x90,BIT,0},
	{0x0a,0x00,BIT,0},
	{0x0c,0x00,BIT,0},
	{0x0d,0x04,BIT,0},
	{0x0e,0xc0,BIT,0},
	{0x0f,0x06,BIT,0},
	{0x10,0x58,BIT,0},
	{0x17,0x14,BIT,0},//0x14
	{0x18,0x0a,BIT,0},
	{0x19,0x0c,BIT,0},
	{0x1a,0x01,BIT,0},
	{0x1b,0x48,BIT,0},
	{0x1e,0x88,BIT,0},
	{0x1f,0x0f,BIT,0},
	{0x20,0x05,BIT,0},
	{0x21,0x0f,BIT,0},
	{0x22,0xf0,BIT,0},
	{0x23,0xc3,BIT,0},
	{0x24,0x16,BIT,0},
	{0xfe,0x01,BIT,0},
	{0x09,0x00,BIT,0},
	{0x0b,0x90,BIT,0},
	{0x13,0x74,BIT,0},
	{0xfe,0x00,BIT,0},
	{0xfe,0x00,BIT,0},
#if 1 //26
	{0x05,0x01,BIT,0},
	{0x06,0x05,BIT,0},
	{0x07,0x00,BIT,0},
	{0x08,0x72,BIT,0},
	{0xfe,0x01,BIT,0},
	{0x27,0x00,BIT,0},
	{0x28,0x92,BIT,0},
	{0x29,0x05,BIT,0},
	{0x2a,0x22,BIT,0},
	{0x2b,0x05,BIT,0},
	{0x2c,0xb4,BIT,0},
	{0x2d,0x07,BIT,0},
	{0x2e,0x6a,BIT,0},
	{0x2f,0x0a,BIT,0},
	{0x30,0x44,BIT,0},

	{0x3e,0x40,BIT,0},
#endif
#if 0 //24
	{0x05,0x01,BIT,0},
	{0x06,0x25,BIT,0},
	{0x07,0x00,BIT,0},
	{0x08,0x14,BIT,0},
	{0xfe,0x01,BIT,0},
	{0x27,0x00,BIT,0},
	{0x28,0x83,BIT,0},
	{0x29,0x04,BIT,0},
	{0x2a,0x9b,BIT,0},
	{0x2b,0x04,BIT,0},
	{0x2c,0x9b,BIT,0},
	{0x2d,0x05,BIT,0},
	{0x2e,0xa1,BIT,0},
	{0x2f,0x07,BIT,0},
	{0x30,0x2a,BIT,0},

	{0x3e,0x40,BIT,0},
#endif
	{0xfe,0x00,BIT,0},
	{0xb6,0x03,BIT,0},
	{0xfe,0x00,BIT,0},
	{0x3f,0x00,BIT,0},
	{0x40,0x77,BIT,0},
	{0x42,0x7f,BIT,0},
	{0x43,0x30,BIT,0},
	{0x5c,0x08,BIT,0},
	{0x5e,0x20,BIT,0},
	{0x5f,0x20,BIT,0},
	{0x60,0x20,BIT,0},
	{0x61,0x20,BIT,0},
	{0x62,0x20,BIT,0},
	{0x63,0x20,BIT,0},
	{0x64,0x20,BIT,0},
	{0x65,0x20,BIT,0},
	{0x66,0x20,BIT,0},
	{0x67,0x20,BIT,0},
	{0x68,0x20,BIT,0},
	{0x69,0x20,BIT,0},
	{0x90,0x01,BIT,0},
	{0x95,0x04,BIT,0},
	{0x96,0xb0,BIT,0},
	{0x97,0x06,BIT,0},
	{0x98,0x40,BIT,0},
	{0xfe,0x03,BIT,0},
	{0x42,0x80,BIT,0},
	{0x43,0x06,BIT,0},
	{0x41,0x00,BIT,0},
	{0x40,0x00,BIT,0},
	{0x17,0x01,BIT,0},
	{0xfe,0x00,BIT,0},
	{0x80,0xff,BIT,0},
	{0x81,0x26,BIT,0},
	{0x03,0x05,BIT,0},
	{0x04,0x2e,BIT,0},

	{0x84,0x02,BIT,0},
	{0x86,0x02,BIT,0},
	{0x87,0x80,BIT,0},
	{0x8b,0xbc,BIT,0},
	{0xa7,0x80,BIT,0},
	{0xa8,0x80,BIT,0},
	{0xb0,0x80,BIT,0},
	{0xc0,0x40,BIT,0},
	{0xfe,0x01,BIT,0},
	{0xc2,0x1e,BIT,0},
	{0xc3,0x10,BIT,0},
	{0xc4,0x09,BIT,0},
	{0xc8,0x16,BIT,0},
	{0xc9,0x0a,BIT,0},
	{0xca,0x00,BIT,0},
	{0xbc,0x33,BIT,0},
	{0xbd,0x12,BIT,0},
	{0xbe,0x0d,BIT,0},
	{0xb6,0x30,BIT,0},
	{0xb7,0x18,BIT,0},
	{0xb8,0x00,BIT,0},
	{0xc5,0x00,BIT,0},
	{0xc6,0x00,BIT,0},
	{0xc7,0x00,BIT,0},
	{0xcb,0x00,BIT,0},
	{0xcc,0x0b,BIT,0},
	{0xcd,0x16,BIT,0},
	{0xbf,0x00,BIT,0},
	{0xc0,0x00,BIT,0},
	{0xc1,0x00,BIT,0},
	{0xb9,0x0c,BIT,0},
	{0xba,0x00,BIT,0},
	{0xbb,0x12,BIT,0},
	{0xaa,0x00,BIT,0},
	{0xab,0x00,BIT,0},
	{0xac,0x00,BIT,0},
	{0xad,0x12,BIT,0},
	{0xae,0x00,BIT,0},
	{0xaf,0x00,BIT,0},
	{0xb0,0x00,BIT,0},
	{0xb1,0x00,BIT,0},
	{0xb2,0x00,BIT,0},
	{0xb3,0x00,BIT,0},
	{0xb4,0x00,BIT,0},
	{0xb5,0x06,BIT,0},
	{0xd0,0x00,BIT,0},
	{0xd2,0x0e,BIT,0},
	{0xd3,0x0b,BIT,0},
	{0xd8,0x21,BIT,0},
	{0xda,0x18,BIT,0},
	{0xdb,0x18,BIT,0},
	{0xdc,0x00,BIT,0},
	{0xde,0x09,BIT,0},
	{0xdf,0x00,BIT,0},
	{0xd4,0x08,BIT,0},
	{0xd6,0x0e,BIT,0},
	{0xd7,0x00,BIT,0},
	{0xa4,0x00,BIT,0},
	{0xa5,0x00,BIT,0},
	{0xa6,0x40,BIT,0},
	{0xa7,0x00,BIT,0},
	{0xa8,0x00,BIT,0},
	{0xa9,0x40,BIT,0},
	{0xa1,0x80,BIT,0},
	{0xa2,0x80,BIT,0},
	{0xfe,0x02,BIT,0},
	{0xa4,0x00,BIT,0},
	{0xfe,0x00,BIT,0},
	{0xfe,0x02,BIT,0},
	{0xc0,0x01,BIT,0},
	{0xc1,0x40,BIT,0},
	{0xc2,0xfc,BIT,0},
	{0xc3,0x05,BIT,0},
	{0xc4,0xec,BIT,0},
	{0xc5,0x42,BIT,0},
	{0xc6,0xf8,BIT,0},
	{0xc7,0x40,BIT,0},
	{0xc8,0xf8,BIT,0},
	{0xc9,0x06,BIT,0},
	{0xca,0xfd,BIT,0},
	{0xcb,0x3e,BIT,0},
	{0xcc,0xf3,BIT,0},
	{0xcd,0x36,BIT,0},
	{0xce,0xf6,BIT,0},
	{0xcf,0x04,BIT,0},
	{0xe3,0x0c,BIT,0},
	{0xe4,0x44,BIT,0},
	{0xe5,0xe5,BIT,0},
	{0xfe,0x00,BIT,0},
	{0xfe,0x01,BIT,0},
	{0x4f,0x00,BIT,0},
	{0x4d,0x00,BIT,0},
	{0x4e,0x00,BIT,0},
	{0x4e,0x00,BIT,0},
	{0x4e,0x00,BIT,0},
	{0x4e,0x00,BIT,0},
	{0x4e,0x00,BIT,0},
	{0x4e,0x00,BIT,0},
	{0x4e,0x00,BIT,0},
	{0x4e,0x00,BIT,0},
	{0x4e,0x00,BIT,0},
	{0x4e,0x00,BIT,0},
	{0x4e,0x00,BIT,0},
	{0x4e,0x00,BIT,0},
	{0x4e,0x00,BIT,0},
	{0x4e,0x00,BIT,0},
	{0x4e,0x00,BIT,0},
	{0x4e,0x00,BIT,0},
	{0x4d,0x10,BIT,0},
	{0x4e,0x00,BIT,0},
	{0x4e,0x00,BIT,0},
	{0x4e,0x00,BIT,0},
	{0x4e,0x00,BIT,0},
	{0x4e,0x00,BIT,0},
	{0x4e,0x00,BIT,0},
	{0x4e,0x00,BIT,0},
	{0x4e,0x00,BIT,0},
	{0x4e,0x00,BIT,0},
	{0x4e,0x00,BIT,0},
	{0x4e,0x00,BIT,0},
	{0x4e,0x00,BIT,0},
	{0x4e,0x00,BIT,0},
	{0x4e,0x00,BIT,0},
	{0x4e,0x00,BIT,0},
	{0x4e,0x00,BIT,0},
	{0x4d,0x20,BIT,0},///////////20
	{0x4e,0x00,BIT,0},
	{0x4e,0x00,BIT,0},
	{0x4e,0x00,BIT,0},
	{0x4e,0x00,BIT,0},
	{0x4e,0x00,BIT,0},
	{0x4e,0x00,BIT,0},
	{0x4e,0x00,BIT,0},
	{0x4e,0x00,BIT,0},
	{0x4e,0x00,BIT,0},
	{0x4e,0x00,BIT,0},
	{0x4e,0x00,BIT,0},
	{0x4e,0x00,BIT,0},
	{0x4e,0x00,BIT,0},
	{0x4e,0x00,BIT,0},
	{0x4e,0x00,BIT,0},
	{0x4e,0x00,BIT,0},
	{0x4d,0x30,BIT,0},/////////////30
	{0x4e,0x00,BIT,0},
	{0x4e,0x00,BIT,0},
	{0x4e,0x00,BIT,0},
	{0x4e,0x00,BIT,0},
	{0x4e,0x00,BIT,0},
	{0x4e,0x02,BIT,0},
	{0x4e,0x00,BIT,0},
	{0x4e,0x00,BIT,0},
	{0x4e,0x00,BIT,0},
	{0x4e,0x00,BIT,0},
	{0x4e,0x00,BIT,0},
	{0x4e,0x00,BIT,0},
	{0x4e,0x00,BIT,0},
	{0x4e,0x00,BIT,0},
	{0x4e,0x00,BIT,0},
	{0x4e,0x00,BIT,0},
	{0x4d,0x40,BIT,0},/////////////////40
	{0x4e,0x00,BIT,0},
	{0x4e,0x00,BIT,0},
	{0x4e,0x00,BIT,0},
	{0x4e,0x00,BIT,0},
	{0x4e,0x04,BIT,0},
	{0x4e,0x02,BIT,0},
	{0x4e,0x00,BIT,0},
	{0x4e,0x00,BIT,0},
	{0x4e,0x00,BIT,0},
	{0x4e,0x00,BIT,0},
	{0x4e,0x00,BIT,0},
	{0x4e,0x00,BIT,0},
	{0x4e,0x00,BIT,0},
	{0x4e,0x00,BIT,0},
	{0x4e,0x00,BIT,0},
	{0x4e,0x00,BIT,0},
	{0x4d,0x50,BIT,0},////////////50
	{0x4e,0x00,BIT,0},
	{0x4e,0x00,BIT,0},
	{0x4e,0x08,BIT,0},
	{0x4e,0x08,BIT,0},
	{0x4e,0x04,BIT,0},
	{0x4e,0x04,BIT,0},
	{0x4e,0x00,BIT,0},
	{0x4e,0x00,BIT,0},
	{0x4e,0x00,BIT,0},
	{0x4e,0x00,BIT,0},
	{0x4e,0x00,BIT,0},
	{0x4e,0x00,BIT,0},
	{0x4e,0x00,BIT,0},
	{0x4e,0x00,BIT,0},
	{0x4e,0x00,BIT,0},
	{0x4e,0x00,BIT,0},
	{0x4d,0x60,BIT,0},///////////60
	{0x4e,0x00,BIT,0},
	{0x4e,0x00,BIT,0},
	{0x4e,0x00,BIT,0},
	{0x4e,0x20,BIT,0},
	{0x4e,0x00,BIT,0},
	{0x4e,0x00,BIT,0},
	{0x4e,0x00,BIT,0},
	{0x4e,0x00,BIT,0},
	{0x4e,0x00,BIT,0},
	{0x4e,0x00,BIT,0},
	{0x4e,0x00,BIT,0},
	{0x4e,0x00,BIT,0},
	{0x4e,0x00,BIT,0},
	{0x4e,0x00,BIT,0},
	{0x4e,0x00,BIT,0},
	{0x4e,0x00,BIT,0},
	{0x4d,0x70,BIT,0},/////////////70
	{0x4e,0x00,BIT,0},
	{0x4e,0x00,BIT,0},
	{0x4e,0x20,BIT,0},
	{0x4e,0x00,BIT,0},
	{0x4e,0x00,BIT,0},
	{0x4e,0x00,BIT,0},
	{0x4e,0x00,BIT,0},
	{0x4e,0x00,BIT,0},
	{0x4e,0x00,BIT,0},
	{0x4e,0x00,BIT,0},
	{0x4e,0x00,BIT,0},
	{0x4e,0x00,BIT,0},
	{0x4e,0x00,BIT,0},
	{0x4e,0x00,BIT,0},
	{0x4e,0x00,BIT,0},
	{0x4e,0x00,BIT,0},
	{0x4d,0x80,BIT,0},//////////////80
	{0x4e,0x00,BIT,0},
	{0x4e,0x20,BIT,0},
	{0x4e,0x00,BIT,0},
	{0x4e,0x00,BIT,0},
	{0x4e,0x00,BIT,0},
	{0x4e,0x00,BIT,0},
	{0x4e,0x00,BIT,0},
	{0x4e,0x00,BIT,0},
	{0x4e,0x00,BIT,0},
	{0x4e,0x00,BIT,0},
	{0x4e,0x00,BIT,0},
	{0x4e,0x00,BIT,0},
	{0x4e,0x00,BIT,0},
	{0x4e,0x00,BIT,0},
	{0x4e,0x00,BIT,0},
	{0x4e,0x00,BIT,0},
	{0x4d,0x90,BIT,0},////////////////////90
	{0x4e,0x00,BIT,0},
	{0x4e,0x00,BIT,0},
	{0x4e,0x00,BIT,0},
	{0x4e,0x00,BIT,0},
	{0x4e,0x00,BIT,0},
	{0x4e,0x00,BIT,0},
	{0x4e,0x00,BIT,0},
	{0x4e,0x00,BIT,0},
	{0x4e,0x00,BIT,0},
	{0x4e,0x00,BIT,0},
	{0x4e,0x00,BIT,0},
	{0x4e,0x00,BIT,0},
	{0x4e,0x00,BIT,0},
	{0x4e,0x00,BIT,0},
	{0x4e,0x00,BIT,0},
	{0x4e,0x00,BIT,0},
	{0x4d,0xa0,BIT,0},///////////////a0
	{0x4e,0x00,BIT,0},
	{0x4e,0x00,BIT,0},
	{0x4e,0x00,BIT,0},
	{0x4e,0x00,BIT,0},
	{0x4e,0x00,BIT,0},
	{0x4e,0x00,BIT,0},
	{0x4e,0x00,BIT,0},
	{0x4e,0x00,BIT,0},
	{0x4e,0x00,BIT,0},
	{0x4e,0x00,BIT,0},
	{0x4e,0x00,BIT,0},
	{0x4e,0x00,BIT,0},
	{0x4e,0x00,BIT,0},
	{0x4e,0x00,BIT,0},
	{0x4e,0x00,BIT,0},
	{0x4e,0x00,BIT,0},
	{0x4d,0xb0,BIT,0},///////////////////////////////b0
	{0x4e,0x00,BIT,0},
	{0x4e,0x00,BIT,0},
	{0x4e,0x00,BIT,0},
	{0x4e,0x00,BIT,0},
	{0x4e,0x00,BIT,0},
	{0x4e,0x00,BIT,0},
	{0x4e,0x00,BIT,0},
	{0x4e,0x00,BIT,0},
	{0x4e,0x00,BIT,0},
	{0x4e,0x00,BIT,0},
	{0x4e,0x00,BIT,0},
	{0x4e,0x00,BIT,0},
	{0x4e,0x00,BIT,0},
	{0x4e,0x00,BIT,0},
	{0x4e,0x00,BIT,0},
	{0x4e,0x00,BIT,0},
	{0x4d,0xc0,BIT,0},////////////////////////////////c0
	{0x4e,0x00,BIT,0},
	{0x4e,0x00,BIT,0},
	{0x4e,0x00,BIT,0},
	{0x4e,0x00,BIT,0},
	{0x4e,0x00,BIT,0},
	{0x4e,0x00,BIT,0},
	{0x4e,0x00,BIT,0},
	{0x4e,0x00,BIT,0},
	{0x4e,0x00,BIT,0},
	{0x4e,0x00,BIT,0},
	{0x4e,0x00,BIT,0},
	{0x4e,0x00,BIT,0},
	{0x4e,0x00,BIT,0},
	{0x4e,0x00,BIT,0},
	{0x4e,0x00,BIT,0},
	{0x4e,0x00,BIT,0},
	{0x4d,0xd0,BIT,0},/////////////////////////d0
	{0x4e,0x00,BIT,0},
	{0x4e,0x00,BIT,0},
	{0x4e,0x00,BIT,0},
	{0x4e,0x00,BIT,0},
	{0x4e,0x00,BIT,0},
	{0x4e,0x00,BIT,0},
	{0x4e,0x00,BIT,0},
	{0x4e,0x00,BIT,0},
	{0x4e,0x00,BIT,0},
	{0x4e,0x00,BIT,0},
	{0x4e,0x00,BIT,0},
	{0x4e,0x00,BIT,0},
	{0x4e,0x00,BIT,0},
	{0x4e,0x00,BIT,0},
	{0x4e,0x00,BIT,0},
	{0x4e,0x00,BIT,0},
	{0x4d,0xe0,BIT,0},//////////////////////////////e0
	{0x4e,0x00,BIT,0},
	{0x4e,0x00,BIT,0},
	{0x4e,0x00,BIT,0},
	{0x4e,0x00,BIT,0},
	{0x4e,0x00,BIT,0},
	{0x4e,0x00,BIT,0},
	{0x4e,0x00,BIT,0},
	{0x4e,0x00,BIT,0},
	{0x4e,0x00,BIT,0},
	{0x4e,0x00,BIT,0},
	{0x4e,0x00,BIT,0},
	{0x4e,0x00,BIT,0},
	{0x4e,0x00,BIT,0},
	{0x4e,0x00,BIT,0},
	{0x4e,0x00,BIT,0},
	{0x4e,0x00,BIT,0},
	{0x4d,0xf0,BIT,0},////////////////////////////////f0
	{0x4e,0x00,BIT,0},
	{0x4e,0x00,BIT,0},
	{0x4e,0x00,BIT,0},
	{0x4e,0x00,BIT,0},
	{0x4e,0x00,BIT,0},
	{0x4e,0x00,BIT,0},
	{0x4e,0x00,BIT,0},
	{0x4e,0x00,BIT,0},
	{0x4e,0x00,BIT,0},
	{0x4e,0x00,BIT,0},
	{0x4e,0x00,BIT,0},
	{0x4e,0x00,BIT,0},
	{0x4e,0x00,BIT,0},
	{0x4e,0x00,BIT,0},
	{0x4e,0x00,BIT,0},
	{0x4e,0x00,BIT,0},
	{0x4f,0x01,BIT,0},
	{0x50,0x80,BIT,0},
	{0x56,0x06,BIT,0},

//	{0x50,0x80,BIT,0},
	{0x52,0x40,BIT,0},
	{0x54,0x60,BIT,0},
//	{0x56,0x00,BIT,0},
	{0x57,0x20,BIT,0},
	{0x58,0x01,BIT,0},
	{0x5b,0x08,BIT,0},
	{0x61,0xaa,BIT,0},
	{0x62,0xaa,BIT,0},
	{0x71,0x00,BIT,0},
	{0x72,0x25,BIT,0},
	{0x74,0x10,BIT,0},
	{0x77,0x08,BIT,0},
	{0x78,0xfd,BIT,0},
	{0x86,0x30,BIT,0},
	{0x87,0x00,BIT,0},
	{0x88,0x04,BIT,0},
	{0x8a,0xc0,BIT,0},
	{0x89,0x71,BIT,0},
	{0x84,0x08,BIT,0},
	{0x8b,0x00,BIT,0},
	{0x8d,0x70,BIT,0},
	{0x8e,0x70,BIT,0},
	{0x8f,0xf4,BIT,0},
	{0xfe,0x00,BIT,0},
	{0x82,0x02,BIT,0},
	{0xfe,0x01,BIT,0},
	{0x21,0xbf,BIT,0},
	{0xfe,0x02,BIT,0},
	{0xa5,0x50,BIT,0},
	{0xa2,0xb0,BIT,0},
	{0xa6,0x50,BIT,0},
	{0xa7,0x30,BIT,0},
	{0xab,0x31,BIT,0},
	{0x88,0x15,BIT,0},
	{0xa9,0x6c,BIT,0},
	{0xb0,0x55,BIT,0},
	{0xb3,0x70,BIT,0},
	{0x8c,0xf6,BIT,0},
	{0x89,0x03,BIT,0},
	{0xde,0xb6,BIT,0},
	{0x38,0x08,BIT,0},
	{0x39,0x50,BIT,0},
	{0xfe,0x00,BIT,0},
	{0x81,0x26,BIT,0},
	{0x87,0x80,BIT,0},
	{0xfe,0x02,BIT,0},
	{0x83,0x00,BIT,0},
	{0x84,0x45,BIT,0},
	{0xd1,0x38,BIT,0},
	{0xd2,0x38,BIT,0},
	{0xdd,0x38,BIT,0},
	{0xfe,0x00,BIT,0},
	{0xfe,0x02,BIT,0},
	{0x2b,0x00,BIT,0},
	{0x2c,0x04,BIT,0},
	{0x2d,0x09,BIT,0},
	{0x2e,0x18,BIT,0},
	{0x2f,0x27,BIT,0},
	{0x30,0x37,BIT,0},
	{0x31,0x49,BIT,0},
	{0x32,0x5c,BIT,0},
	{0x33,0x7e,BIT,0},
	{0x34,0xa0,BIT,0},
	{0x35,0xc0,BIT,0},
	{0x36,0xe0,BIT,0},
	{0x37,0xff,BIT,0},
	{0xfe,0x00,BIT,0},

	//////////////////////////////////////////
	{0xfe,0x01,BIT,0},
	{0x21,0xbf,BIT,0},
	{0xfe,0x02,BIT,0},
	{0xa4,0x00,BIT,0},
	{0xa5,0x40,BIT,0},//lsc_th
	{0xa2,0xa0,BIT,0},//lsc_dec_slope
	{0xa6,0x80,BIT,0},//dd_th
	{0xa7,0x80,BIT,0},//ot_th
	{0xab,0x31,BIT,0},
	{0xa9,0x6f,BIT,0},
	{0xb0,0x99,BIT,0},//0x//edge effect slope low
	{0xb1,0x34,BIT,0},//edge effect slope low
	{0xb3,0x80,BIT,0},//saturation dec slope
	{0xde,0xb6,BIT,0},
	{0x38,0x0f,BIT,0},
	{0x39,0x60,BIT,0},
	{0xfe,0x00,BIT,0},
	{0x81,0x26,BIT,0},
	{0xfe,0x02,BIT,0},
	{0x83,0x00,BIT,0},
	{0x84,0x45,BIT,0},
	////////////YCP//////////
	{0xd1,0x30,BIT,0},//saturation_cb
	{0xd2,0x30,BIT,0},//saturation_Cr
	{0xd3,0x40,BIT,0},//contrast ?
	{0xd4,0x80,BIT,0},//contrast center
	{0xd5,0x00,BIT,0},//luma_offset
	{0xdc,0x30,BIT,0},
	{0xdd,0xb8,BIT,0},//edge_sa_g,b
	{0xfe,0x00,BIT,0},
	///////dndd///////////
	{0xfe,0x02,BIT,0},
	{0x88,0x15,BIT,0},//dn_b_base
	{0x8c,0xf6,BIT,0},//[2]b_in_dark_inc
	{0x89,0x03,BIT,0},//dn_c_weight
	////////EE///////////
	{0xfe,0x02,BIT,0},
	{0x90,0x6c,BIT,0},// EEINTP mode1
	{0x97,0x45,BIT,0},// edge effect

	{0xfe,0x00,BIT,0},
	{0xfe,0x01,BIT,0},
	{0x21,0xff,BIT,0},
	{0xfe,0x02,BIT,0},
	{0x8a,0x33,BIT,0},
	{0x8c,0x76,BIT,0},
	{0x8d,0x85,BIT,0},
	{0xa6,0xf0,BIT,0},
	{0xae,0x9f,BIT,0},
	{0xa2,0x90,BIT,0},
	{0xa5,0x40,BIT,0},
	{0xa7,0x30,BIT,0},
	{0xb0,0x88,BIT,0},
	{0x38,0x0b,BIT,0},
	{0x39,0x30,BIT,0},
	{0xfe,0x00,BIT,0},
	{0x87,0xb0,BIT,0},

	////dark sun/////
	{0xfe,0x02,BIT,0},
	{0x40,0x06,BIT,0},
	{0x41,0x23,BIT,0},
	{0x42,0x3f,BIT,0},
	{0x43,0x06,BIT,0},
	{0x44,0x00,BIT,0},
	{0x45,0x00,BIT,0},
	{0x46,0x14,BIT,0},
	{0x47,0x09,BIT,0},
	{0xfe,0x00,BIT,0},

	////////////////////////////////////////
	{0x82,0xfe,BIT,200},
	//MIPI
	{0xf2,0x00,BIT,0},
	{0xf3,0x00,BIT,0},
	{0xf4,0x00,BIT,0},
	{0xf5,0x00,BIT,0},
	{0xfe,0x01,BIT,0},
	{0x0b,0x90,BIT,0},
	{0x87,0x10,BIT,0},
	{0xfe,0x00,BIT,0},

	{0xfe,0x03,BIT,0},
	{0x01,0x03,BIT,0},//07//2 lanes
	{0x02,0x14,BIT,0},//05 0x14 [6:4] lane0 driver [2:0] clock lane driver
	{0x03,0x11,BIT,0},
	{0x06,0x90,BIT,0},//leo changed
	{0x11,0x1E,BIT,0},
	{0x12,0x80,BIT,0},
	{0x13,0x0c,BIT,0},
	{0x15,0x11,BIT,0},//{0x15, 0x10, 0},// clk_lane mode
	{0x04,0x20,BIT,0},
	{0x05,0x00,BIT,0},
	{0x17,0x00,BIT,0},

	{0x21,0x01,BIT,0},
	{0x22,0x02,BIT,0},//T_CLK_HS_PREPARE_set
	{0x23,0x01,BIT,0},//T_CLK_zero_set
	{0x29,0x02,BIT,0},//T_HS_PREPARE_SET 0x03 01 01,03 05
	{0x2a,0x01,BIT,0},//T_HS_Zero_set
//	{0x2b,0x06,BIT,0},
	{0x10,0x94,BIT,0},//95
	{0xfe,0x00,BIT,0},
};

static struct sensor_reg_list gc2035_init = {
	.size = ARRAY_ROW(init_gc2035),
	.val = init_gc2035
};

static struct sensor_reg_list gc2035_uxga = {
	.size = ARRAY_ROW(uxga_gc2035),
	.val = uxga_gc2035
};
static struct sensor_reg_list gc2035_vga = {
	.size = ARRAY_ROW(vga_gc2035),
	.val = vga_gc2035
};
static struct sensor_reg_list gc2035_qvga = {
	.size = ARRAY_ROW(qvga_gc2035),
	.val = qvga_gc2035
};
static struct sensor_reg_list gc2035_qcif = {
	.size = ARRAY_ROW(qcif_gc2035),
	.val = qcif_gc2035
};
static struct sensor_reg_list gc2035_qqvga = {
	.size = ARRAY_ROW(qqvga_gc2035),
	.val = qqvga_gc2035
};
static struct sensor_win_size gc2035_win_size[] = {
	WIN_SIZE("UXGA", W_UXGA, H_UXGA, &gc2035_uxga),
	WIN_SIZE("VGA", W_VGA, H_VGA, &gc2035_vga),
	WIN_SIZE("QVGA", W_QVGA, H_QVGA, &gc2035_qvga),
	WIN_SIZE("QCIF", W_QCIF, H_QCIF, &gc2035_qcif),
	WIN_SIZE("QQVGA", W_QQVGA, H_QQVGA, &gc2035_qqvga),
};

static struct sensor_win_cfg gc2035_win_cfg = {
	.num = ARRAY_ROW(gc2035_win_size),
	.win_size = gc2035_win_size
};

static struct sensor_csi_cfg gc2035_csi_cfg = {
	.csi_en = true,
	.d_term_en = 5,
	.c_term_en = 5,
	.dhs_settle = 5,
	.chs_settle = 5,
};

static struct sensor_info gc2035_info = {
	.name		= "gc2035_csi",
	.chip_id	= 0x2035,
	.mclk		= 26,
	.i2c_addr	= 0x3C,
	.exp_def	= 0,
	.awb_def	= 1,
	.rst_act_h	= false,
	.pdn_act_h	= true,
	.init		= &gc2035_init,
	.win_cfg	= &gc2035_win_cfg,
	.csi_cfg	= &gc2035_csi_cfg
};

extern void sensor_power_down(bool high, bool acth, int id);
extern void sensor_reset(bool rst, bool acth);
extern void sensor_clock(bool out, int mclk);
extern void sensor_read(const u16 addr, u8 *data, u8 bits);
extern void sensor_write(const u16 addr, const u8 data, u8 bits);
extern void sensor_write_group(struct sensor_reg* reg, u32 size);

static u32 gc2035_power(int id, int mclk, bool rst_h, bool pdn_h)
{
	/* set state to power off */
	sensor_power_down(true, pdn_h, 0);
	mdelay(1);
	sensor_power_down(true, pdn_h, 1);
	mdelay(1);
	sensor_reset(true, rst_h);
	mdelay(1);

	/* power on sequence */
	sensor_clock(true, mclk);
	mdelay(1);
	sensor_power_down(false, pdn_h, id);
	mdelay(1);
	sensor_reset(false, rst_h);
	mdelay(10);

	return 0;
}

static u32 gc2035_get_chipid(void)
{
	u16 chip_id = 0;
	u8 tmp;

	sensor_read(0xf0, &tmp, BIT);
	chip_id = (tmp << 8) & 0xff00;
	sensor_read(0xf1, &tmp, BIT);
	chip_id |= (tmp & 0xff);

	return chip_id;
}

static u32 gc2035_get_lum(void)
{
	u8 val = 0;
	u32 ret = 0;

	sensor_write(0xfe, 0x01, BIT);
	sensor_read(0x14, &val, BIT);
	sensor_write(0xfe, 0x00, BIT);

	if (val < 0x50)
		ret = 1;

	return ret;
}

#define GC2035_FLIP_BASE	0x17
#define GC2035_H_FLIP_BIT	0
#define GC2035_V_FLIP_BIT	1
static void gc2035_set_flip(int hv, int flip)
{
	u8 tmp = 0;

	sensor_read(GC2035_FLIP_BASE, &tmp, BIT);

	if (hv) {
		if (flip)
			tmp |= (0x1 << GC2035_V_FLIP_BIT);
		else
			tmp &= ~(0x1 << GC2035_V_FLIP_BIT);
	}
	else {
		if (flip)
			tmp |= (0x1 << GC2035_H_FLIP_BIT);
		else
			tmp &= ~(0x1 << GC2035_H_FLIP_BIT);
	}

	sensor_write(GC2035_FLIP_BASE, tmp, BIT);
}

#define GC2035_EXP_ROW		ARRAY_ROW(exp_gc2035)
#define GC2035_EXP_COL		ARRAY_COL(exp_gc2035)
static void gc2035_set_exp(int exp)
{
	int key = exp + (GC2035_EXP_ROW / 2);
	if ((key < 0) || (key > (GC2035_EXP_ROW - 1)))
		return;

	sensor_write_group(exp_gc2035[key], GC2035_EXP_COL);
}

#define GC2035_AWB_ROW		ARRAY_ROW(awb_gc2035)
#define GC2035_AWB_COL		ARRAY_COL(awb_gc2035)
static void gc2035_set_awb(int awb)
{
	if ((awb < 0) || (awb > (GC2035_AWB_ROW - 1)))
		return;

	sensor_write_group(awb_gc2035[awb], GC2035_AWB_COL);
}

static struct sensor_ops gc2035_ops = {
	.power		= gc2035_power,
	.get_chipid	= gc2035_get_chipid,
	.get_lum	= gc2035_get_lum,
	.set_flip	= gc2035_set_flip,
	.set_exp	= gc2035_set_exp,
	.set_awb	= gc2035_set_awb,
	.start		= NULL,
	.stop		= NULL
};

struct sensor_dev gc2035_dev = {
	.info	= &gc2035_info,
	.ops	= &gc2035_ops,
};

#undef BIT
#endif
