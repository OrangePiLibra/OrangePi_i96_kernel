#ifndef _GC0312_CFG_H_
#define _GC0312_CFG_H_

#include "rda_sensor.h"
#include <linux/delay.h>

#include "tgt_ap_board_config.h"

#ifdef BIT
#undef BIT
#endif
#define BIT	8

static const struct sensor_reg exp_gc0312[][4] =
{
	{{0xfe,0x01,BIT,0},{0x13,0x10,BIT,0},{0xfe,0x00,BIT,0},{0xff,0xff,BIT,0}},
	{{0xfe,0x01,BIT,0},{0x13,0x20,BIT,0},{0xfe,0x00,BIT,0},{0xff,0xff,BIT,0}},
	{{0xfe,0x01,BIT,0},{0x13,0x30,BIT,0},{0xfe,0x00,BIT,0},{0xff,0xff,BIT,0}},
	{{0xfe,0x01,BIT,0},{0x13,0x38,BIT,0},{0xfe,0x00,BIT,0},{0xff,0xff,BIT,0}},
	{{0xfe,0x01,BIT,0},{0x13,0x60,BIT,0},{0xfe,0x00,BIT,0},{0xff,0xff,BIT,0}},
	{{0xfe,0x01,BIT,0},{0x13,0x80,BIT,0},{0xfe,0x00,BIT,0},{0xff,0xff,BIT,0}},
};

static struct sensor_reg awb_gc0312[][4] =
{
	{{0x42,0xfd,BIT,0},{0x77,0x40,BIT,0},{0x78,0x54,BIT,0},{0x79,0x70,BIT,0}},//OFF
	{{0x42,0xfe,BIT,0},{0x77,0x57,BIT,0},{0x78,0x4d,BIT,0},{0x79,0x45,BIT,0}},//AUTO
	{{0x42,0xfd,BIT,0},{0x77,0x48,BIT,0},{0x78,0x40,BIT,0},{0x79,0x5c,BIT,0}},//INCANDESCENT
	{{0x42,0xfd,BIT,0},{0x77,0x40,BIT,0},{0x78,0x42,BIT,0},{0x79,0x50,BIT,0}},//FLUORESCENT
	{{0x42,0xfd,BIT,0},{0x77,0x40,BIT,0},{0x78,0x54,BIT,0},{0x79,0x70,BIT,0}},//TUNGSTEN
	{{0x42,0xfd,BIT,0},{0x77,0x50,BIT,0},{0x78,0x45,BIT,0},{0x79,0x40,BIT,0}},//DAYLIGHT
	{{0x42,0xfd,BIT,0},{0x77,0x5a,BIT,0},{0x78,0x42,BIT,0},{0x79,0x40,BIT,0}},//CLOUD
};

static const struct sensor_reg bri_gc0312[][4] =
{
	{{0xd5,0xd0,BIT,0},{0xff,0xff,BIT,0}},
	{{0xd5,0xe0,BIT,0},{0xff,0xff,BIT,0}},
	{{0xd5,0xf0,BIT,0},{0xff,0xff,BIT,0}},
	{{0xd5,0x00,BIT,0},{0xff,0xff,BIT,0}},
	{{0xd5,0x20,BIT,0},{0xff,0xff,BIT,0}},
	{{0xd5,0x30,BIT,0},{0xff,0xff,BIT,0}},
	{{0xd5,0x40,BIT,0},{0xff,0xff,BIT,0}},
};

static const struct sensor_reg con_gc0312[][4] =
{
	{{0xd3,0x30,BIT,0},{0xff,0xff,BIT,0}},
	{{0xd3,0x34,BIT,0},{0xff,0xff,BIT,0}},
	{{0xd3,0x38,BIT,0},{0xff,0xff,BIT,0}},
	{{0xd3,0x40,BIT,0},{0xff,0xff,BIT,0}},
	{{0xd3,0x44,BIT,0},{0xff,0xff,BIT,0}},
	{{0xd3,0x48,BIT,0},{0xff,0xff,BIT,0}},
	{{0xd3,0x50,BIT,0},{0xff,0xff,BIT,0}},
};

static const struct sensor_reg sha_gc0312[][4] =
{
	{{0x95,0x32,BIT,0},{0xff,0xff,BIT,0}},
	{{0x95,0x43,BIT,0},{0xff,0xff,BIT,0}},
	{{0x95,0x54,BIT,0},{0xff,0xff,BIT,0}},
	{{0x95,0x65,BIT,0},{0xff,0xff,BIT,0}},
	{{0x95,0x76,BIT,0},{0xff,0xff,BIT,0}},
	{{0x95,0x87,BIT,0},{0xff,0xff,BIT,0}},
	{{0x95,0x98,BIT,0},{0xff,0xff,BIT,0}},
};

static const struct sensor_reg sat_gc0312[][4] =
{
	{{0xd1,0x20,BIT,0},{0xd2,0x20,BIT,0},{0xff,0xff,BIT,0}},
	{{0xd1,0x28,BIT,0},{0xd2,0x28,BIT,0},{0xff,0xff,BIT,0}},
	{{0xd1,0x30,BIT,0},{0xd2,0x30,BIT,0},{0xff,0xff,BIT,0}},
	{{0xd1,0x34,BIT,0},{0xd2,0x34,BIT,0},{0xff,0xff,BIT,0}},
	{{0xd1,0x40,BIT,0},{0xd2,0x40,BIT,0},{0xff,0xff,BIT,0}},
	{{0xd1,0x48,BIT,0},{0xd2,0x48,BIT,0},{0xff,0xff,BIT,0}},
	{{0xd1,0x50,BIT,0},{0xd2,0x50,BIT,0},{0xff,0xff,BIT,0}},
};

static struct sensor_reg af_gc0312[][17] =
{
       //50hz:
       {{0xfe,0x00,BIT,0},
        {0x05,0x02,BIT,0},
        {0x06,0xd1,BIT,0},
        {0x07,0x00,BIT,0},
        {0x08,0x22,BIT,0},
        {0xfe,0x01,BIT,0},
        {0x25,0x00,BIT,0},     //anti-flicker step [11:8]
        {0x26,0x6a,BIT,0},     //anti-flicker step [7:0]
        {0x27,0x02,BIT,0},     //exp level 0  14.28fps
        {0x28,0x12,BIT,0},
        {0x29,0x03,BIT,0},     //exp level 1  12.50fps
        {0x2a,0x50,BIT,0},
        {0x2b,0x05,BIT,0},     //exp level 2  7fps
        {0x2c,0xcc,BIT,0},
        {0x2d,0x07,BIT,0},     //exp level 3  5.55fp
        {0x2e,0x74,BIT,0},
        {0xfe,0x00,BIT,0}},
       //60hz:
       {{0xfe,0x00,BIT,0},
        {0x05,0x02,BIT,0},
        {0x06,0x60,BIT,0},
        {0x07,0x00,BIT,0},
        {0x08,0x58,BIT,0},
        {0xfe,0x01,BIT,0},
        {0x25,0x00,BIT,0},     //anti-flicker step [11:8]
        {0x26,0x60,BIT,0},     //anti-flicker step [7:0]
        {0x27,0x02,BIT,0},     //exp level 0  14.28fps
        {0x28,0x40,BIT,0},
        {0x29,0x03,BIT,0},     //exp level 1  12.50fps
        {0x2a,0x60,BIT,0},
        {0x2b,0x06,BIT,0},     //exp level 2  6.67fps
        {0x2c,0x00,BIT,0},
        {0x2d,0x08,BIT,0},     //exp level 3  5.55fps
        {0x2e,0x40,BIT,0},
        {0xfe,0x00,BIT,0}},
};


// use this for 640x480 (VGA) capture
static struct sensor_reg vga_gc0312[] =
{
//////////// Set Frame Rate /////////////
	{0xfe,0x00,BIT,0},
	{0x05,0x02,BIT,0},
	{0x06,0xd1,BIT,0}, //HB
	{0x07,0x00,BIT,0},
	{0x08,0x24,BIT,0}, //VB
	{0xfe,0x01,BIT,0},
	{0x25,0x00,BIT,0}, //step
	{0x26,0x6a,BIT,0},
	{0x27,0x02,BIT,0}, //20fps
	{0x28,0x12,BIT,0},
	{0x29,0x03,BIT,0}, //12.5fps
	{0x2a,0x50,BIT,0},
	{0x2b,0x04,BIT,0}, //7.14fps  //5cc
	{0x2c,0x24,BIT,0},
	{0x2d,0x07,BIT,0}, //5.55fps
	{0x2e,0x74,BIT,0},
	{0x3c,0x20,BIT,0},
	{0xfe,0x00,BIT,0},
//////////// Set Window /////////////
	{0xfe,0x00,BIT,0},
	{0x18,0x1a,BIT,0},
	{0x50,0x01,BIT,0},// crop 640x480 //
	{0x51,0x00,BIT,0},
	{0x52,0x00,BIT,0},
	{0x53,0x00,BIT,0},
	{0x54,0x00,BIT,0},
	{0x55,0x01,BIT,0},
	{0x56,0xe0,BIT,0},// 480
	{0x57,0x02,BIT,0},
	{0x58,0x80,BIT,0},// 640
};

// use this for 320x240 (QVGA) capture
static struct sensor_reg qvga_gc0312[] =
{
//////////// Set Frame Rate /////////////
	{0xfe,0x00,BIT,0},
	{0x05,0x02,BIT,0},
	{0x06,0xd1,BIT,0}, //HB
	{0x07,0x00,BIT,0},
	{0x08,0x24,BIT,0}, //VB
	{0xfe,0x01,BIT,0},
	{0x25,0x00,BIT,0}, //step
	{0x26,0xd4,BIT,0},
	{0x27,0x02,BIT,0}, //20fps
	{0x28,0x7c,BIT,0},
	{0x29,0x04,BIT,0}, //12.5fps
	{0x2a,0x24,BIT,0},
	{0x2b,0x05,BIT,0}, //7.14fps  //5cc
	{0x2c,0xcc,BIT,0},
	{0x2d,0x07,BIT,0}, //5.55fps
	{0x2e,0x74,BIT,0},
	{0x3c,0x20,BIT,0},
	{0xfe,0x00,BIT,0},
//////////// Set Window /////////////
	{0xfe,0x00,BIT,0},
	{0x18,0x7a,BIT,0},
	{0x50,0x01,BIT,0},// crop 320x240 //
	{0x51,0x00,BIT,0},
	{0x52,0x00,BIT,0},
	{0x53,0x00,BIT,0},
	{0x54,0x00,BIT,0},
	{0x55,0x00,BIT,0},
	{0x56,0xf0,BIT,0},// 240
	{0x57,0x01,BIT,0},
	{0x58,0x40,BIT,0},// 320
};

// use this for 160x120 (QQVGA) capture
static struct sensor_reg qqvga_gc0312[] =
{
//////////// Set Frame Rate /////////////
	{0xfe,0x00,BIT,0},
	{0x05,0x02,BIT,0},
	{0x06,0xd1,BIT,0}, //HB
	{0x07,0x00,BIT,0},
	{0x08,0x24,BIT,0}, //VB
	{0xfe,0x01,BIT,0},
	{0x25,0x00,BIT,0}, //step
	{0x26,0xd4,BIT,0},
	{0x27,0x02,BIT,0}, //20fps
	{0x28,0x7c,BIT,0},
	{0x29,0x04,BIT,0}, //12.5fps
	{0x2a,0x24,BIT,0},
	{0x2b,0x05,BIT,0}, //7.14fps  //5cc
	{0x2c,0xcc,BIT,0},
	{0x2d,0x07,BIT,0}, //5.55fps
	{0x2e,0x74,BIT,0},
	{0x3c,0x20,BIT,0},
	{0xfe,0x00,BIT,0},
//////////// Set Window /////////////
	{0xfe,0x00,BIT,0},
	{0x18,0x7a,BIT,0},
	{0x50,0x01,BIT,0},// crop 160x120 start //
	{0x51,0x00,BIT,0},
	{0x52,0x00,BIT,0},
	{0x53,0x00,BIT,0},
	{0x54,0x00,BIT,0},
	{0x55,0x00,BIT,0},
	{0x56,0x78,BIT,0},// 120
	{0x57,0x00,BIT,0},
	{0x58,0xa0,BIT,0},// 160
};

// use this for 176x144 (QCIF) capture
static struct sensor_reg qcif_gc0312[] =
{
	{0xfe,0x00,BIT,0},
	{0x05,0x02,BIT,0},
	{0x06,0xd1,BIT,0}, //HB
	{0x07,0x00,BIT,0},
	{0x08,0x24,BIT,0}, //VB
	{0xfe,0x01,BIT,0},
	{0x25,0x00,BIT,0}, //step
	{0x26,0xd4,BIT,0},
	{0x27,0x02,BIT,0}, //20fps
	{0x28,0x7c,BIT,0},
	{0x29,0x04,BIT,0}, //12.5fps
	{0x2a,0x24,BIT,0},
	{0x2b,0x05,BIT,0}, //7.14fps  //5cc
	{0x2c,0xcc,BIT,0},
	{0x2d,0x07,BIT,0}, //5.55fps
	{0x2e,0x74,BIT,0},
	{0x3c,0x20,BIT,0},
	{0xfe,0x00,BIT,0},
////////////////////////////////////////////////
//////////// Set Window /////////////
////////////////////////////////////////////////
	{0xfe,0x00,BIT,0},
	{0x18,0x7a,BIT,0},
	{0x50,0x01,BIT,0},// crop 176x144 //
	{0x51,0x00,BIT,0},
	{0x52,0x00,BIT,0},
	{0x53,0x00,BIT,0},
	{0x54,0x00,BIT,0},
	{0x55,0x00,BIT,0},
	{0x56,0x90,BIT,0},// 144
	{0x57,0x00,BIT,0},
	{0x58,0xb0,BIT,0},// 176
};

// use this for init sensor
static struct sensor_reg init_gc0312[] =
{
	{0xfe,0xf0,BIT,0},
	{0xfe,0xf0,BIT,0},
	{0xfe,0x00,BIT,0},
	{0xfc,0x0e,BIT,0},
	{0xfc,0x0e,BIT,0},
	{0xf2,0x07,BIT,0},
	{0xf3,0x00,BIT,0}, // output_disable
	{0xf7,0x1b,BIT,0},
	{0xf8,0x04,BIT,0},
	{0xf9,0x0e,BIT,0},
	{0xfa,0x11,BIT,0},
	/////////////////////////////////////////////////
	/////////////////  CISCTL reg	/////////////////
	/////////////////////////////////////////////////
	{0x00,0x2f,BIT,0},
	{0x01,0x0f,BIT,0},//06
	{0x02,0x04,BIT,0},
	{0x03,0x03,BIT,0},
	{0x04,0x50,BIT,0},
	{0x09,0x00,BIT,0},
	{0x0a,0x00,BIT,0},
	{0x0b,0x00,BIT,0},
	{0x0c,0x04,BIT,0},
	{0x0d,0x01,BIT,0},
	{0x0e,0xf0,BIT,0},	//e8
	{0x0f,0x02,BIT,0},
	{0x10,0x88,BIT,0},
	{0x16,0x00,BIT,0},
#ifdef _TGT_AP_CAM_FLIP_MIRROR_ENABLE
	{0x17,0x14 | _TGT_AP_CAM_FLIP_MIRROR_ENABLE,BIT,0},
#else
	{0x17,0x14,BIT,0},
#endif
	{0x18,0x1a,BIT,0},
	{0x19,0x14,BIT,0},
	{0x1b,0x48,BIT,0},
	{0x1e,0x6b,BIT,0},
	{0x1f,0x28,BIT,0},
	{0x20,0x8b,BIT,0},//0x89 travis20140801
	{0x21,0x49,BIT,0},
	{0x22,0xb0,BIT,0},
	{0x23,0x04,BIT,0},
	{0x24,0x16,BIT,0},
	{0x34,0x20,BIT,0},

	/////////////////////////////////////////////////
	////////////////////   BLK	 ////////////////////
	/////////////////////////////////////////////////
	{0x26,0x23,BIT,0},
	{0x28,0xff,BIT,0},
	{0x29,0x00,BIT,0},
	{0x33,0x10,BIT,0},
	{0x37,0x20,BIT,0},
	{0x38,0x10,BIT,0},
	{0x47,0x80,BIT,0},
	{0x4e,0x66,BIT,0},
	{0xa8,0x02,BIT,0},
	{0xa9,0x80,BIT,0},

	/////////////////////////////////////////////////
	//////////////////	ISP reg   ///////////////////
	/////////////////////////////////////////////////
	{0x40,0xff,BIT,0},
	{0x41,0x21,BIT,0},
	{0x42,0xcf,BIT,0},
	{0x44,0x02,BIT,0},
	{0x45,0xa8,BIT,0},
	{0x46,0x03,BIT,0}, //sync
	{0x4a,0x11,BIT,0},
	{0x4b,0x01,BIT,0},
	{0x4c,0x20,BIT,0},
	{0x4d,0x05,BIT,0},
	{0x4f,0x01,BIT,0},
	{0x50,0x01,BIT,0},
	{0x55,0x01,BIT,0},
	{0x56,0xe0,BIT,0},
	{0x57,0x02,BIT,0},
	{0x58,0x80,BIT,0},

	/////////////////////////////////////////////////
	///////////////////   GAIN   ////////////////////
	/////////////////////////////////////////////////
	{0x70,0x70,BIT,0},
	{0x5a,0x84,BIT,0},
	{0x5b,0xc9,BIT,0},
	{0x5c,0xed,BIT,0},
	{0x77,0x74,BIT,0},
	{0x78,0x40,BIT,0},
	{0x79,0x5f,BIT,0},

	/////////////////////////////////////////////////
	///////////////////   DNDD  /////////////////////
	/////////////////////////////////////////////////
	{0x82,0x0a,BIT,0},  //14
	{0x83,0x1f,BIT,0}, // 0b
	{0x89,0xf0,BIT,0},

	/////////////////////////////////////////////////
	//////////////////   EEINTP  ////////////////////
	/////////////////////////////////////////////////
	{0x8f,0xaa,BIT,0},
	{0x90,0x8c,BIT,0},
	{0x91,0x90,BIT,0},
	{0x92,0x03,BIT,0},
	{0x93,0x03,BIT,0},
	{0x94,0x05,BIT,0},
	{0x95,0x65,BIT,0},
	{0x96,0xf0,BIT,0},

	/////////////////////////////////////////////////
	/////////////////////  ASDE  ////////////////////
	/////////////////////////////////////////////////
	{0xfe,0x00,BIT,0},

	{0x9a,0x20,BIT,0},
	{0x9b,0x80,BIT,0},
	{0x9c,0x40,BIT,0},
	{0x9d,0x80,BIT,0},

	{0xa1,0x30,BIT,0},
	{0xa2,0x32,BIT,0},
	{0xa4,0x30,BIT,0},
	{0xa5,0x30,BIT,0},
	{0xaa,0x10,BIT,0},
	{0xac,0x22,BIT,0},

	/////////////////////////////////////////////////
	///////////////////   GAMMA   ///////////////////
	/////////////////////////////////////////////////
	{0xfe,0x00,BIT,0},//default
	{0xbf,0x08,BIT,0},
	{0xc0,0x16,BIT,0},
	{0xc1,0x28,BIT,0},
	{0xc2,0x41,BIT,0},
	{0xc3,0x5a,BIT,0},
	{0xc4,0x6c,BIT,0},
	{0xc5,0x7a,BIT,0},
	{0xc6,0x96,BIT,0},
	{0xc7,0xac,BIT,0},
	{0xc8,0xbc,BIT,0},
	{0xc9,0xc9,BIT,0},
	{0xca,0xd3,BIT,0},
	{0xcb,0xdd,BIT,0},
	{0xcc,0xe5,BIT,0},
	{0xcd,0xf1,BIT,0},
	{0xce,0xfa,BIT,0},
	{0xcf,0xff,BIT,0},

/*
	{0xfe,0x00, 0},//big gamma
	{0xbf,0x08, 0},
	{0xc0,0x1d, 0},
	{0xc1,0x34, 0},
	{0xc2,0x4b, 0},
	{0xc3,0x60, 0},
	{0xc4,0x73, 0},
	{0xc5,0x85, 0},
	{0xc6,0x9f, 0},
	{0xc7,0xb5, 0},
	{0xc8,0xc7, 0},
	{0xc9,0xd5, 0},
	{0xca,0xe0, 0},
	{0xcb,0xe7, 0},
	{0xcc,0xec, 0},
	{0xcd,0xf4, 0},
	{0xce,0xfa, 0},
	{0xcf,0xff, 0},
*/

/*
	{0xfe,0x00, 0},//small gamma
	{0xbf,0x08, 0},
	{0xc0,0x18, 0},
	{0xc1,0x2c, 0},
	{0xc2,0x41, 0},
	{0xc3,0x59, 0},
	{0xc4,0x6e, 0},
	{0xc5,0x81, 0},
	{0xc6,0x9f, 0},
	{0xc7,0xb5, 0},
	{0xc8,0xc7, 0},
	{0xc9,0xd5, 0},
	{0xca,0xe0, 0},
	{0xcb,0xe7, 0},
	{0xcc,0xec, 0},
	{0xcd,0xf4, 0},
	{0xce,0xfa, 0},
	{0xcf,0xff, 0},
*/
	/////////////////////////////////////////////////
	///////////////////   YCP  //////////////////////
	/////////////////////////////////////////////////
	{0xd0,0x40,BIT,0},
	{0xd1,0x3c,BIT,0},
	{0xd2,0x3c,BIT,0},
	{0xd3,0x40,BIT,0},
	{0xd6,0xf2,BIT,0},
	{0xd7,0x1b,BIT,0},
	{0xd8,0x18,BIT,0},
	{0xdd,0x03,BIT,0},

	/////////////////////////////////////////////////
	////////////////////   AEC   ////////////////////
	/////////////////////////////////////////////////
	{0xfe,0x01,BIT,0},
	{0x05,0x30,BIT,0},
	{0x06,0x75,BIT,0},
	{0x07,0x40,BIT,0},
	{0x08,0xb0,BIT,0},
	{0x0a,0xc5,BIT,0},
	{0x0b,0x11,BIT,0},
	{0x0c,0x00,BIT,0},
	{0x12,0x52,BIT,0},
	{0x13,0x38,BIT,0},
	{0x18,0x95,BIT,0},
	{0x19,0x96,BIT,0},
	{0x1f,0x20,BIT,0},
	{0x20,0xc0,BIT,0},
	{0x3e,0x40,BIT,0},
	{0x3f,0x57,BIT,0},
	{0x40,0x7d,BIT,0},
	{0x03,0x60,BIT,0},
	{0x44,0x02,BIT,0},

	/////////////////////////////////////////////////
	////////////////////   AWB   ////////////////////
	/////////////////////////////////////////////////
	{0x1c,0x91,BIT,0},
	{0x21,0x15,BIT,0},
	{0x50,0x80,BIT,0},
	{0x56,0x04,BIT,0},
	{0x59,0x08,BIT,0},
	{0x5b,0x02,BIT,0},
	{0x61,0x8d,BIT,0},
	{0x62,0xa7,BIT,0},
	{0x63,0xd0,BIT,0},
	{0x65,0x06,BIT,0},
	{0x66,0x06,BIT,0},
	{0x67,0x84,BIT,0},
	{0x69,0x08,BIT,0},
	{0x6a,0x25,BIT,0},
	{0x6b,0x01,BIT,0},
	{0x6c,0x00,BIT,0},
	{0x6d,0x02,BIT,0},
	{0x6e,0xf0,BIT,0},
	{0x6f,0x80,BIT,0},
	{0x76,0x80,BIT,0},
	{0x78,0xaf,BIT,0},
	{0x79,0x75,BIT,0},
	{0x7a,0x40,BIT,0},
	{0x7b,0x50,BIT,0},
	{0x7c,0x0c,BIT,0},

	{0xa4,0xb9,BIT,0},
	{0xa5,0xa0,BIT,0},
	{0x90,0xc9,BIT,0},
	{0x91,0xbe,BIT,0},

	{0xa6,0xb8,BIT,0},
	{0xa7,0x95,BIT,0},
	{0x92,0xe6,BIT,0},
	{0x93,0xca,BIT,0},

	{0xa9,0xbc,BIT,0},
	{0xaa,0x95,BIT,0},
	{0x95,0x23,BIT,0},
	{0x96,0xe7,BIT,0},

	{0xab,0x9d,BIT,0},
	{0xac,0x80,BIT,0},
	{0x97,0x43,BIT,0},
	{0x98,0x24,BIT,0},

	{0xae,0xb7,BIT,0},
	{0xaf,0x9e,BIT,0},
	{0x9a,0x43,BIT,0},
	{0x9b,0x24,BIT,0},

	{0xb0,0xc8,BIT,0},
	{0xb1,0x97,BIT,0},
	{0x9c,0xc4,BIT,0},
	{0x9d,0x44,BIT,0},

	{0xb3,0xb7,BIT,0},
	{0xb4,0x7f,BIT,0},
	{0x9f,0xc7,BIT,0},
	{0xa0,0xc8,BIT,0},

	{0xb5,0x00,BIT,0},
	{0xb6,0x00,BIT,0},
	{0xa1,0x00,BIT,0},
	{0xa2,0x00,BIT,0},

	{0x86,0x60,BIT,0},
	{0x87,0x08,BIT,0},
	{0x88,0x00,BIT,0},
	{0x89,0x00,BIT,0},
	{0x8b,0xde,BIT,0},
	{0x8c,0x80,BIT,0},
	{0x8d,0x00,BIT,0},
	{0x8e,0x00,BIT,0},

	{0x94,0x55,BIT,0},
	{0x99,0xa6,BIT,0},
	{0x9e,0xaa,BIT,0},
	{0xa3,0x0a,BIT,0},
	{0x8a,0x0a,BIT,0},
	{0xa8,0x55,BIT,0},
	{0xad,0x55,BIT,0},
	{0xb2,0x55,BIT,0},
	{0xb7,0x05,BIT,0},
	{0x8f,0x05,BIT,0},

	{0xb8,0xcc,BIT,0},
	{0xb9,0x9a,BIT,0},

	/////////////////////////////////////////////////
	////////////////////  CC ////////////////////////
	/////////////////////////////////////////////////
	{0xfe,0x01,BIT,0},

	{0xd0,0x40,BIT,0},//skin red  38
	{0xd1,0x00,BIT,0},
	{0xd2,0x02,BIT,0},
	{0xd3,0x04,BIT,0},
	{0xd4,0x44,BIT,0}, //38
	{0xd5,0x12,BIT,0},

	/*{0xd0,0x38, 0},//skin white
	{0xd1,0xfd, 0},
	{0xd2,0x06, 0},
	{0xd3,0xf0, 0},
	{0xd4,0x40, 0},
	{0xd5,0x08, 0},*/

	{0xd6,0x30,BIT,0},
	{0xd7,0x00,BIT,0},
	{0xd8,0x0a,BIT,0},
	{0xd9,0x16,BIT,0},
	{0xda,0x39,BIT,0},
	{0xdb,0xf8,BIT,0},

	/////////////////////////////////////////////////
	////////////////////   LSC   ////////////////////
	/////////////////////////////////////////////////
	{0xfe,0x01,BIT,0},
	{0xc1,0x3c,BIT,0},
	{0xc2,0x50,BIT,0},
	{0xc3,0x00,BIT,0},
	{0xc4,0x40,BIT,0},
	{0xc5,0x30,BIT,0},
	{0xc6,0x30,BIT,0},
	{0xc7,0x10,BIT,0},
	{0xc8,0x00,BIT,0},
	{0xc9,0x00,BIT,0},
	{0xdc,0x20,BIT,0},
	{0xdd,0x10,BIT,0},
	{0xdf,0x00,BIT,0},
	{0xde,0x00,BIT,0},

	/////////////////////////////////////////////////
	///////////////////  Histogram  /////////////////
	/////////////////////////////////////////////////
	{0x01,0x10,BIT,0},
	{0x0b,0x31,BIT,0},
	{0x0e,0x50,BIT,0},
	{0x0f,0x0f,BIT,0},
	{0x10,0x6e,BIT,0},
	{0x12,0xa0,BIT,0},
	{0x15,0x60,BIT,0},
	{0x16,0x60,BIT,0},
	{0x17,0xe0,BIT,0},

	/////////////////////////////////////////////////
	//////////////   Measure Window   ///////////////
	/////////////////////////////////////////////////
	{0xcc,0x0c,BIT,0},
	{0xcd,0x10,BIT,0},
	{0xce,0xa0,BIT,0},
	{0xcf,0xe6,BIT,0},

	/////////////////////////////////////////////////
	/////////////////   dark sun   //////////////////
	/////////////////////////////////////////////////
	{0x45,0xf7,BIT,0},
	{0x46,0xff,BIT,0},
	{0x47,0x15,BIT,0},
	{0x48,0x03,BIT,0},
	{0x4f,0x60,BIT,0},

	/////////////////////////////////////////////////
	///////////////////  banding  ///////////////////
	/////////////////////////////////////////////////
	{0xfe,0x00,BIT,0},
	{0x05,0x02,BIT,0},
	{0x06,0xd1,BIT,0}, //HB
	{0x07,0x00,BIT,0},
	{0x08,0x24,BIT,0}, //VB
	{0xfe,0x01,BIT,0},
	{0x25,0x00,BIT,0}, //step
	{0x26,0x6a,BIT,0},
	{0x27,0x02,BIT,0}, //20fps
	{0x28,0x12,BIT,0},
	{0x29,0x03,BIT,0}, //12.5fps
	{0x2a,0x50,BIT,0},
	{0x2b,0x04,BIT,0}, //7.14fps  //5cc
	{0x2c,0x24,BIT,0},
	{0x2d,0x07,BIT,0}, //5.55fps
	{0x2e,0x74,BIT,0},
	{0x3c,0x20,BIT,0},
	{0xfe,0x00,BIT,0},
	/////////////////////////////////////////////////
	/////////////////////  DVP   ////////////////////
	/////////////////////////////////////////////////
	{0xfe,0x03,BIT,0},
	{0x01,0x00,BIT,0},
	{0x02,0x00,BIT,0},
	{0x10,0x00,BIT,0},
	{0x15,0x00,BIT,0},
	{0xfe,0x00,BIT,0},
	///////////////////OUTPUT//////////////////////
	{0xf3,0xff,BIT,0},// output_enable
};

static struct sensor_reg_list gc0312_init = {
	.size = ARRAY_ROW(init_gc0312),
	.val = init_gc0312
};

static struct sensor_reg_list gc0312_vga = {
	.size = ARRAY_ROW(vga_gc0312),
	.val = vga_gc0312
};
static struct sensor_reg_list gc0312_qvga = {
	.size = ARRAY_ROW(qvga_gc0312),
	.val = qvga_gc0312
};
static struct sensor_reg_list gc0312_qcif = {
	.size = ARRAY_ROW(qcif_gc0312),
	.val = qcif_gc0312
};
static struct sensor_reg_list gc0312_qqvga = {
	.size = ARRAY_ROW(qqvga_gc0312),
	.val = qqvga_gc0312
};
static struct sensor_win_size gc0312_win_size[] = {
	WIN_SIZE("VGA", W_VGA, H_VGA, &gc0312_vga),
	WIN_SIZE("QVGA", W_QVGA, H_QVGA, &gc0312_qvga),
	WIN_SIZE("QCIF", W_QCIF, H_QCIF, &gc0312_qcif),
	WIN_SIZE("QQVGA", W_QQVGA, H_QQVGA, &gc0312_qqvga),
};

static struct sensor_win_cfg gc0312_win_cfg = {
	.num = ARRAY_ROW(gc0312_win_size),
	.win_size = gc0312_win_size
};

static struct sensor_csi_cfg gc0312_csi_cfg = {
	.csi_en = false,
	.d_term_en = 0,
	.c_term_en = 0,
	.dhs_settle = 0,
	.chs_settle = 0,
};

static struct sensor_info gc0312_info = {
	.name		= "gc0312",
	.chip_id	= 0xb3,
	.mclk		= 26,
	.i2c_addr	= 0x21,
	.exp_def	= 0,
	.awb_def	= 1,
	.af_def         = 1,
	.rst_act_h	= false,
	.pdn_act_h	= true,
	.init		= &gc0312_init,
	.win_cfg	= &gc0312_win_cfg,
	.csi_cfg	= &gc0312_csi_cfg
};

extern void sensor_power_down(bool high, bool acth, int id);
extern void sensor_reset(bool rst, bool acth);
extern void sensor_clock(bool out, int mclk);
extern void sensor_read(const u16 addr, u8 *data, u8 bits);
extern void sensor_write(const u16 addr, const u8 data, u8 bits);
extern void sensor_write_group(struct sensor_reg* reg, u32 size);

static u32 gc0312_power(int id, int mclk, bool rst_h, bool pdn_h)
{
	/* set state to power off */
	sensor_power_down(true, pdn_h, 0);
	mdelay(1);
	sensor_power_down(true, pdn_h, 1);
	mdelay(1);
	sensor_reset(true, rst_h);
	mdelay(1);

	/* power on sequence */
	sensor_clock(true, mclk);
	mdelay(1);
	sensor_power_down(false, pdn_h, id);
	mdelay(1);
	sensor_reset(false, rst_h);
	mdelay(10);

	return 0;
}

static u32 gc0312_get_chipid(void)
{
	u8 chip_id = 0;

	sensor_read(0xf0, &chip_id, BIT);

	return chip_id;
}

static u32 gc0312_get_lum(void)
{
	u8 val = 0;
	u32 ret = 0;

	sensor_write(0xfe, 0x0, BIT);
	sensor_read(0x14, &val, BIT);
	//sensor_write(0xfe, 0x00, BIT);

	if (val < 0x30)
		ret = 1;

	return ret;
}

#define GC0312_FLIP_BASE	0x17
#define GC0312_H_FLIP_BIT	0
#define GC0312_V_FLIP_BIT	1
static void gc0312_set_flip(int hv, int flip)
{
	u8 tmp = 0;

	sensor_read(GC0312_FLIP_BASE, &tmp, BIT);

	if (hv) {
		if (flip)
			tmp |= (0x1 << GC0312_V_FLIP_BIT);
		else
			tmp &= ~(0x1 << GC0312_V_FLIP_BIT);
	}
	else {
		if (flip)
			tmp |= (0x1 << GC0312_H_FLIP_BIT);
		else
			tmp &= ~(0x1 << GC0312_H_FLIP_BIT);
	}

	sensor_write(GC0312_FLIP_BASE, tmp, BIT);
}

#define GC0312_EXP_ROW		ARRAY_ROW(exp_gc0312)
#define GC0312_EXP_COL		ARRAY_COL(exp_gc0312)
static void gc0312_set_exp(int exp)
{
	int key = exp + (GC0312_EXP_ROW / 2);
	if ((key < 0) || (key > (GC0312_EXP_ROW - 1)))
		return;

	sensor_write_group(exp_gc0312[key], GC0312_EXP_COL);
}

#define GC0312_BRI_ROW		ARRAY_ROW(bri_gc0312)
#define GC0312_BRI_COL		ARRAY_COL(bri_gc0312)
static void gc0312_set_bri(int bri)
{
	if ((bri < 0) || (bri > (GC0312_BRI_ROW - 1)))
		return;

	sensor_write_group(bri_gc0312[bri], GC0312_BRI_COL);
}

#define GC0312_CON_ROW		ARRAY_ROW(con_gc0312)
#define GC0312_CON_COL		ARRAY_COL(con_gc0312)
static void gc0312_set_con(int con)
{
	if ((con < 0) || (con > (GC0312_CON_ROW - 1)))
		return;

	sensor_write_group(con_gc0312[con], GC0312_CON_COL);
}

#define GC0312_SHA_ROW		ARRAY_ROW(sha_gc0312)
#define GC0312_SHA_COL		ARRAY_COL(sha_gc0312)
static void gc0312_set_sha(int sha)
{
	if ((sha < 0) || (sha > (GC0312_SHA_ROW - 1)))
		return;

	sensor_write_group(sha_gc0312[sha], GC0312_SHA_COL);
}

#define GC0312_SAT_ROW		ARRAY_ROW(sat_gc0312)
#define GC0312_SAT_COL		ARRAY_COL(sat_gc0312)
static void gc0312_set_sat(int sat)
{
	if ((sat < 0) || (sat > (GC0312_SAT_ROW - 1)))
		return;

	sensor_write_group(sat_gc0312[sat], GC0312_SAT_COL);
}

#define GC0312_AWB_ROW		ARRAY_ROW(awb_gc0312)
#define GC0312_AWB_COL		ARRAY_COL(awb_gc0312)
static void gc0312_set_awb(int awb)
{
	if ((awb < 0) || (awb > (GC0312_AWB_ROW - 1)))
		return;

	sensor_write_group(awb_gc0312[awb], GC0312_AWB_COL);
}

#define GC0312_AF_ROW		ARRAY_ROW(af_gc0312)
#define GC0312_AF_COL		ARRAY_COL(af_gc0312)
static void gc0312_set_af(int af)
{
	if ((af < 1) || (af > 2 ))
		return;

	sensor_write_group(af_gc0312[af-1], GC0312_AF_COL);
}

static struct sensor_reg test_gc0312[] =
{
	{0xfe,0x00,BIT,0},

	{0xfa,0x32,BIT,0},//24MCLK  ///0x11 for 12MCLK

	{0x40,0x08,BIT,0},//only intpenable
	{0x41,0x00,BIT,0},//close all
	{0x42,0x00,BIT,0},//close all
	{0x4f,0x00,BIT,0},//AEC un

	{0x18,0x06,BIT,0},//sdark

	{0x77,0x40,BIT,0},//AWB gain
	{0x78,0x40,BIT,0},//AWB gain
	{0x79,0x40,BIT,0},//AWB gain
	{0xd0,0x40,BIT,0},//Global saturation
	{0xdd,0x00,BIT,0},//edge_sa
	{0x71,0x40,BIT,0},//Auto_pregain
	{0x72,0x40,BIT,0},//Auto_pregain
	{0x03,0x00,BIT,0},//Exposure
	{0x04,0x00,BIT,0},

	{0x4c,0x01,BIT,0},//test pattern
};

static void gc0312_sensor_test(void)
{
	sensor_write_group(test_gc0312, ARRAY_ROW(test_gc0312));
}

static struct sensor_ops gc0312_ops = {
	.power		= gc0312_power,
	.get_chipid	= gc0312_get_chipid,
	.get_lum	= gc0312_get_lum,
	.set_flip	= gc0312_set_flip,
	.set_exp	= gc0312_set_exp,
	.set_awb	= gc0312_set_awb,
	.set_bri	= gc0312_set_bri,
	.set_con	= gc0312_set_con,
	.set_sha	= gc0312_set_sha,
	.set_sat	= gc0312_set_sat,
	.set_af 	= gc0312_set_af,
	.sensor_test = gc0312_sensor_test,
	.start		= NULL,
	.stop		= NULL
};

struct sensor_dev gc0312_dev = {
	.info	= &gc0312_info,
	.ops	= &gc0312_ops,
};

#undef BIT
#endif
