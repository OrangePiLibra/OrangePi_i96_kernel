#ifndef _GC0329_CFG_H_
#define _GC0329_CFG_H_

#include "rda_sensor.h"
#include <linux/delay.h>

#ifdef BIT
#undef BIT
#endif
#define BIT	8

static struct sensor_reg exp_gc0329[][3] =
{
	{{0xfe,0x01,BIT,0},{0x13,0x38,BIT,0},{0xfe,0x00,BIT,0}},
	{{0xfe,0x01,BIT,0},{0x13,0x40,BIT,0},{0xfe,0x00,BIT,0}},
	{{0xfe,0x01,BIT,0},{0x13,0x48,BIT,0},{0xfe,0x00,BIT,0}},
	{{0xfe,0x01,BIT,0},{0x13,0x50,BIT,0},{0xfe,0x00,BIT,0}},
	{{0xfe,0x01,BIT,0},{0x13,0x58,BIT,0},{0xfe,0x00,BIT,0}},
	{{0xfe,0x01,BIT,0},{0x13,0x60,BIT,0},{0xfe,0x00,BIT,0}},
	{{0xfe,0x01,BIT,0},{0x13,0x68,BIT,0},{0xfe,0x00,BIT,0}},
};

static struct sensor_reg awb_gc0329[][4] =
{
	{{0x42,0xfd,BIT,0},{0x77,0x57,BIT,0},{0x78,0x4d,BIT,0},{0x79,0x45,BIT,0}},//OFF
	{{0x42,0xfa,BIT,0},{0x77,0x57,BIT,0},{0x78,0x4d,BIT,0},{0x79,0x45,BIT,0}},//AUTO
	{{0x42,0xf8,BIT,0},{0x77,0x48,BIT,0},{0x78,0x40,BIT,0},{0x79,0x5c,BIT,0}},//INCANDESCENT
	{{0x42,0xf8,BIT,0},{0x77,0x40,BIT,0},{0x78,0x42,BIT,0},{0x79,0x50,BIT,0}},//FLUORESCENT
	{{0x42,0xf8,BIT,0},{0x77,0x40,BIT,0},{0x78,0x54,BIT,0},{0x79,0x70,BIT,0}},//TUNGSTEN
	{{0x42,0xf8,BIT,0},{0x77,0x74,BIT,0},{0x78,0x52,BIT,0},{0x79,0x40,BIT,0}},//DAYLIGHT
	{{0x42,0xf8,BIT,0},{0x77,0x8c,BIT,0},{0x78,0x50,BIT,0},{0x79,0x40,BIT,0}},//CLOUD
};

// use this for 640x480 (VGA) capture
static struct sensor_reg vga_gc0329[] =
{
	//subsample 1/1
	{0x59,0x11,BIT,0},
	{0x5a,0x0e,BIT,0},
	{0x5b,0x00,BIT,0},
	{0x5c,0x00,BIT,0},
	{0x5d,0x00,BIT,0},
	{0x5e,0x00,BIT,0},
	{0x5f,0x00,BIT,0},
	{0x60,0x00,BIT,0},
	{0x61,0x00,BIT,0},
	{0x62,0x00,BIT,0},
	//crop 640x480
	{0x50,0x01,BIT,0},
	{0x51,0x00,BIT,0},
	{0x52,0x00,BIT,0},
	{0x53,0x00,BIT,0},
	{0x54,0x00,BIT,0},
	{0x55,0x01,BIT,0},
	{0x56,0xe0,BIT,0},
	{0x57,0x02,BIT,0},
	{0x58,0x80,BIT,0},
};

// use this for 320x240 (QVGA) capture
static struct sensor_reg qvga_gc0329[] =
{
	//subsample 1/2
	{0xfe,0x00,BIT,0},
	{0x59,0x22,BIT,0},
	{0x5a,0x03,BIT,0},
	{0x5b,0x00,BIT,0},
	{0x5c,0x00,BIT,0},
	{0x5d,0x00,BIT,0},
	{0x5e,0x00,BIT,0},
	{0x5f,0x00,BIT,0},
	{0x60,0x00,BIT,0},
	{0x61,0x00,BIT,0},
	{0x62,0x00,BIT,0},
	//crop 320x240
	{0xfe,0x00,BIT,0},
	{0x50,0x01,BIT,0},
	{0x51,0x00,BIT,0},
	{0x52,0x00,BIT,0},
	{0x53,0x00,BIT,0},
	{0x54,0x00,BIT,0},
	{0x55,0x00,BIT,0},
	{0x56,0xf0,BIT,0},
	{0x57,0x01,BIT,0},
	{0x58,0x40,BIT,0},
};

// use this for 160x120 (QQVGA) capture
static struct sensor_reg qqvga_gc0329[] =
{
	//subsample 1/4
	{0xfe,0x00,BIT,0},
	{0x59,0x44,BIT,0},
	{0x5a,0x03,BIT,0},
	{0x5b,0x00,BIT,0},
	{0x5c,0x00,BIT,0},
	{0x5d,0x00,BIT,0},
	{0x5e,0x00,BIT,0},
	{0x5f,0x00,BIT,0},
	{0x60,0x00,BIT,0},
	{0x61,0x00,BIT,0},
	{0x62,0x00,BIT,0},
	//crop 160x120
	{0xfe,0x00,BIT,0},
	{0x50,0x01,BIT,0},
	{0x51,0x00,BIT,0},
	{0x52,0x00,BIT,0},
	{0x53,0x00,BIT,0},
	{0x54,0x00,BIT,0},
	{0x55,0x00,BIT,0},
	{0x56,0x78,BIT,0},
	{0x57,0x00,BIT,0},
	{0x58,0xa0,BIT,0},
};

// use this for 176x144 (QCIF) capture
static struct sensor_reg qcif_gc0329[] =
{
	//subsample
	{0xfe,0x00,BIT,0},
	{0x59,0x33,BIT,0},
	{0x5a,0x03,BIT,0},
	{0x5b,0x00,BIT,0},
	{0x5c,0x00,BIT,0},
	{0x5d,0x00,BIT,0},
	{0x5e,0x00,BIT,0},
	{0x5f,0x00,BIT,0},
	{0x60,0x00,BIT,0},
	{0x61,0x00,BIT,0},
	{0x62,0x00,BIT,0},
	//crop 176x144
	{0xfe,0x00,BIT,0},
	{0x50,0x01,BIT,0},
	{0x51,0x00,BIT,0},
	{0x52,0x00,BIT,0},
	{0x53,0x00,BIT,0},
	{0x54,0x00,BIT,0},
	{0x55,0x00,BIT,0},
	{0x56,0x90,BIT,0},
	{0x57,0x00,BIT,0},
	{0x58,0xb0,BIT,0},
};

// use this for init sensor
static struct sensor_reg init_gc0329[] =
{
	{0xfe,0x80,BIT,0},
	{0xfc,0x16,BIT,0},
	{0xfc,0x16,BIT,0},
	{0xfe,0x00,BIT,0},

	{0x70,0x48,BIT,0},
	{0x73,0x90,BIT,0},
	{0x74,0x80,BIT,0},
	{0x75,0x80,BIT,0},
	{0x76,0x94,BIT,0},//80jambo
	{0x77,0x62,BIT,0},
	{0x78,0x47,BIT,0},
	{0x79,0x40,BIT,0},

	{0x03,0x02,BIT,0},
	{0x04,0x8a,BIT,0},

	//analog
	{0xfc,0x16,BIT,0},
	{0x09,0x00,BIT,0},
	{0x0a,0x02,BIT,0},
	{0x0b,0x00,BIT,0},
	{0x0c,0x02,BIT,0},
	{0x17,0x14,BIT,0},
	{0x19,0x05,BIT,0},
	{0x1b,0x24,BIT,0},
	{0x1c,0x04,BIT,0},
	{0x1e,0x08,BIT,0},
	{0x1f,0x08,BIT,0},//C8
	{0x20,0x01,BIT,0},
	{0x21,0x48,BIT,0},
	{0x22,0xba,BIT,0},
	{0x23,0x22,BIT,0},
	{0x24,0x16,BIT,0},

	//blk
	{0x26,0xf7,BIT,0},//BLK
	{0x28,0x7f,BIT,0},//BLKlimit
	{0x29,0x00,BIT,0},
	{0x32,0x00,BIT,0},//04darkc
	{0x33,0x20,BIT,0},//blkratio
	{0x34,0x20,BIT,0},
	{0x35,0x20,BIT,0},
	{0x36,0x20,BIT,0},

	{0x3b,0x04,BIT,0},//manualoffset
	{0x3c,0x04,BIT,0},
	{0x3d,0x04,BIT,0},
	{0x3e,0x04,BIT,0},

	//ISPBLOCKENABLE
	{0x40,0xff,BIT,0},
	{0x41,0x24,BIT,0},//[5]skindetection
	{0x42,0xfa,BIT,0},//disableABS
	{0x46,0x03,BIT,0},
	{0x4b,0xca,BIT,0},
	{0x4d,0x01,BIT,0},
	{0x4f,0x01,BIT,0},
	{0x70,0x48,BIT,0},

	//DNDD
	{0x80,0xe7,BIT,0},
	{0x82,0x90,BIT,0},//DNautoDNDDDECDNDD//0e//55jambo
	{0x83,0x05,BIT,0},
	{0x87,0x4a,BIT,0},

	//INTPEE
	{0x90,0x8c,BIT,0},//ac
	{0x92,0x05,BIT,0},
	{0x94,0x05,BIT,0},
	{0x95,0x45,BIT,0},//0x44
	{0x96,0x88,BIT,0},

	//ASDE
	{0xfe,0x01,BIT,0},
	{0x18,0x22,BIT,0},
	{0xfe,0x00,BIT,0},
	{0x9c,0x0a,BIT,0},
	{0xa0,0xaf,BIT,0},
	{0xa2,0xff,BIT,0},
	{0xa4,0x30,BIT,0},//50jambo
	{0xa5,0x31,BIT,0},
	{0xa7,0x35,BIT,0},

	//RGBgamma
	{0xfe,0x00,BIT,0},
	{0xbf,0x0b,BIT,0},
	{0xc0,0x1d,BIT,0},
	{0xc1,0x33,BIT,0},
	{0xc2,0x49,BIT,0},
	{0xc3,0x5d,BIT,0},
	{0xc4,0x6e,BIT,0},
	{0xc5,0x7c,BIT,0},
	{0xc6,0x99,BIT,0},
	{0xc7,0xaf,BIT,0},
	{0xc8,0xc2,BIT,0},
	{0xc9,0xd0,BIT,0},
	{0xca,0xda,BIT,0},
	{0xcb,0xe2,BIT,0},
	{0xcc,0xe7,BIT,0},
	{0xcd,0xf0,BIT,0},
	{0xce,0xf7,BIT,0},
	{0xcf,0xff,BIT,0},

	//Ygamma
	{0xfe,0x00,BIT,0},
	{0x63,0x00,BIT,0},
	{0x64,0x06,BIT,0},
	{0x65,0x0d,BIT,0},
	{0x66,0x1b,BIT,0},
	{0x67,0x2b,BIT,0},
	{0x68,0x3d,BIT,0},
	{0x69,0x50,BIT,0},
	{0x6a,0x60,BIT,0},
	{0x6b,0x80,BIT,0},
	{0x6c,0xa0,BIT,0},
	{0x6d,0xc0,BIT,0},
	{0x6e,0xe0,BIT,0},
	{0x6f,0xff,BIT,0},

	//CC
#if 0//main
	{0xfe,0x00,BIT,0},
	{0xb3,0x44,BIT,0},
	{0xb4,0xfd,BIT,0},
	{0xb5,0x02,BIT,0},
	{0xb6,0xfa,BIT,0},
	{0xb7,0x48,BIT,0},
	{0xb8,0xf0,BIT,0},
#else//sub
	{0xfe,0x00,BIT,0},
	{0xb3,0x42,BIT,0},//40
	{0xb4,0xff,BIT,0},//00
	{0xb5,0x06,BIT,0},//06
	{0xb6,0xf0,BIT,0},//00
	{0xb7,0x44,BIT,0},//40
	{0xb8,0xf0,BIT,0},//00
#endif

	//crop
	{0x50,0x01,BIT,0},


	//YCP
	{0xfe,0x00,BIT,0},

	{0xd0,0x40,BIT,0},
	{0xd1,0x28,BIT,0},
	{0xd2,0x28,BIT,0},

	{0xd3,0x40,BIT,0},//cont0x40
	{0xd5,0x00,BIT,0},

	{0xdd,0x14,BIT,0},
	{0xde,0x34,BIT,0},

	//AEC
	{0xfe,0x01,BIT,0},
	{0x10,0x40,BIT,0},//beforeGamma
	{0x11,0x21,BIT,0},//
	{0x12,0x13,BIT,0},//centerweight*2
	{0x13,0x50,BIT,0},//AETarget
	{0x17,0xa8,BIT,0},//88,08,c8,a8
	{0x1a,0x21,BIT,0},
	{0x20,0x31,BIT,0},//AECstopmargin
	{0x21,0xc0,BIT,0},
	{0x22,0x60,BIT,0},
	{0x3c,0x50,BIT,0},
	{0x3d,0x40,BIT,0},
	{0x3e,0x45,BIT,0},//read3fforstatus

	//AWB
#if 0//main
	{0xfe,0x01,BIT,0},
	{0x06,0x12,BIT,0},
	{0x07,0x06,BIT,0},
	{0x08,0x9c,BIT,0},
	{0x09,0xee,BIT,0},
	{0x50,0xfc,BIT,0},
	{0x51,0x28,BIT,0},
	{0x52,0x10,BIT,0},
	{0x53,0x20,BIT,0},
	{0x54,0x12,BIT,0},
	{0x55,0x16,BIT,0},
	{0x56,0x30,BIT,0},
	{0x58,0x60,BIT,0},
	{0x59,0x08,BIT,0},
	{0x5a,0x02,BIT,0},
	{0x5b,0x63,BIT,0},
	{0x5c,0x35,BIT,0},
	{0x5d,0x72,BIT,0},
	{0x5e,0x11,BIT,0},
	{0x5f,0x40,BIT,0},
	{0x60,0x40,BIT,0},
	{0x61,0xc8,BIT,0},
	{0x62,0xa0,BIT,0},
	{0x63,0x40,BIT,0},
	{0x64,0x50,BIT,0},
	{0x65,0x98,BIT,0},
	{0x66,0xfa,BIT,0},
	{0x67,0x80,BIT,0},
	{0x68,0x60,BIT,0},
	{0x69,0x90,BIT,0},
	{0x6a,0x40,BIT,0},
	{0x6b,0x39,BIT,0},
	{0x6c,0x30,BIT,0},
	{0x6d,0x60,BIT,0},
	{0x6e,0x41,BIT,0},
	{0x70,0x10,BIT,0},
	{0x71,0x00,BIT,0},
	{0x72,0x10,BIT,0},
	{0x73,0x40,BIT,0},
	{0x80,0x60,BIT,0},
	{0x81,0x50,BIT,0},
	{0x82,0x42,BIT,0},
	{0x83,0x40,BIT,0},
	{0x84,0x40,BIT,0},
	{0x85,0x40,BIT,0},
	{0x74,0x40,BIT,0},
	{0x75,0x58,BIT,0},
	{0x76,0x24,BIT,0},
	{0x77,0x40,BIT,0},
	{0x78,0x20,BIT,0},
	{0x79,0x60,BIT,0},
	{0x7a,0x58,BIT,0},
	{0x7b,0x20,BIT,0},
	{0x7c,0x30,BIT,0},
	{0x7d,0x35,BIT,0},
	{0x7e,0x10,BIT,0},
	{0x7f,0x08,BIT,0},
#else//sub
	{0xfe,0x01,BIT,0},
	{0x06,0x16,BIT,0},
	{0x07,0x06,BIT,0},
	{0x08,0x98,BIT,0},
	{0x09,0xee,BIT,0},
	{0x50,0xfc,BIT,0},
	{0x51,0x20,BIT,0},
	{0x52,0x1b,BIT,0},//0b
	{0x53,0x10,BIT,0},//20
	{0x54,0x10,BIT,0},//40
	{0x55,0x10,BIT,0},
	{0x56,0x20,BIT,0},
	{0x57,0xa0,BIT,0},
	{0x58,0xa0,BIT,0},
	{0x59,0x28,BIT,0},
	{0x5a,0x02,BIT,0},
	{0x5b,0x63,BIT,0},
	{0x5c,0x04,BIT,0},//34
	{0x5d,0x73,BIT,0},
	{0x5e,0x11,BIT,0},
	{0x5f,0x40,BIT,0},
	{0x60,0x40,BIT,0},
	{0x61,0xc8,BIT,0},//d8//c8
	{0x62,0xa0,BIT,0},///88//A0
	{0x63,0x40,BIT,0},
	{0x64,0x40,BIT,0},//37
	{0x65,0xd0,BIT,0},
	{0x66,0xfa,BIT,0},
	{0x67,0x70,BIT,0},
	{0x68,0x58,BIT,0},
	{0x69,0xa5,BIT,0},//85jaambo
	{0x6a,0x40,BIT,0},
	{0x6b,0x39,BIT,0},
	{0x6c,0x18,BIT,0},
	{0x6d,0x28,BIT,0},
	{0x6e,0x41,BIT,0},
	{0x70,0x40,BIT,0},
	{0x71,0x00,BIT,0},
	{0x72,0x10,BIT,0},
	{0x73,0x30,BIT,0},//awboutdoor-th
	{0x80,0x60,BIT,0},
	{0x81,0x50,BIT,0},
	{0x82,0x42,BIT,0},
	{0x83,0x40,BIT,0},
	{0x84,0x40,BIT,0},
	{0x85,0x40,BIT,0},
	{0x86,0x40,BIT,0},
	{0x87,0x40,BIT,0},
	{0x88,0xfe,BIT,0},
	{0x89,0xa0,BIT,0},
	{0x74,0x40,BIT,0},
	{0x75,0x58,BIT,0},
	{0x76,0x24,BIT,0},
	{0x77,0x40,BIT,0},
	{0x78,0x20,BIT,0},
	{0x79,0x60,BIT,0},
	{0x7a,0x58,BIT,0},
	{0x7b,0x20,BIT,0},
	{0x7c,0x30,BIT,0},
	{0x7d,0x35,BIT,0},
	{0x7e,0x10,BIT,0},
	{0x7f,0x08,BIT,0},
#endif

	//ABS
	{0x9c,0x00,BIT,0},
	{0x9e,0xc0,BIT,0},
	{0x9f,0x40,BIT,0},

	//CC-AWB
	{0xd0,0x00,BIT,0},
	{0xd2,0x2c,BIT,0},
	{0xd3,0x80,BIT,0},

	//LSC
	{0xfe,0x01,BIT,0},
	{0xc0,0x0b,BIT,0},
	{0xc1,0x07,BIT,0},
	{0xc2,0x05,BIT,0},
	{0xc6,0x0b,BIT,0},
	{0xc7,0x07,BIT,0},
	{0xc8,0x05,BIT,0},
	{0xba,0x39,BIT,0},
	{0xbb,0x24,BIT,0},
	{0xbc,0x23,BIT,0},
	{0xb4,0x39,BIT,0},
	{0xb5,0x24,BIT,0},
	{0xb6,0x23,BIT,0},
	{0xc3,0x00,BIT,0},
	{0xc4,0x00,BIT,0},
	{0xc5,0x00,BIT,0},
	{0xc9,0x00,BIT,0},
	{0xca,0x00,BIT,0},
	{0xcb,0x00,BIT,0},
	{0xbd,0x2b,BIT,0},
	{0xbe,0x00,BIT,0},
	{0xbf,0x00,BIT,0},
	{0xb7,0x09,BIT,0},
	{0xb8,0x00,BIT,0},
	{0xb9,0x00,BIT,0},
	{0xa8,0x31,BIT,0},
	{0xa9,0x23,BIT,0},
	{0xaa,0x20,BIT,0},
	{0xab,0x31,BIT,0},
	{0xac,0x23,BIT,0},
	{0xad,0x20,BIT,0},
	{0xae,0x31,BIT,0},
	{0xaf,0x23,BIT,0},
	{0xb0,0x20,BIT,0},
	{0xb1,0x31,BIT,0},
	{0xb2,0x23,BIT,0},
	{0xb3,0x20,BIT,0},
	{0xa4,0x00,BIT,0},
	{0xa5,0x00,BIT,0},
	{0xa6,0x00,BIT,0},
	{0xa7,0x00,BIT,0},
	{0xa1,0x3c,BIT,0},
	{0xa2,0x50,BIT,0},
	{0xfe,0x00,BIT,0},

	//flicker
	{0x05,0x01,BIT,0},
	{0x06,0x32,BIT,0},
	{0x07,0x00,BIT,0},
	{0x08,0xa2,BIT,0},
	{0xfe,0x01,BIT,0},
	{0x29,0x00,BIT,0},//anti-flickerstep[11:8]
	{0x2a,0x82,BIT,0},//anti-flickerstep[7:0]
	{0x2b,0x02,BIT,0},//explevel0,0x14.28fps
	{0x2c,0x8a,BIT,0},
	{0x2d,0x03,BIT,0},//explevel1,0x12.50fps
	{0x2e,0x8e,BIT,0},
	{0x2f,0x04,BIT,0},//explevel2,0x10.00fps
	{0x30,0x10,BIT,0},
	{0x31,0x08,BIT,0},//explevel3,0x7.14fps
	{0x32,0x20,BIT,0},
	{0xfe,0x00,BIT,0},

	//out
	{0x44,0xa2,BIT,0},
	{0xf0,0x07,BIT,0},
	{0xf1,0x01,BIT,0},
};

static struct sensor_reg_list gc0329_init = {
	.size = ARRAY_ROW(init_gc0329),
	.val = init_gc0329
};

static struct sensor_reg_list gc0329_vga = {
	.size = ARRAY_ROW(vga_gc0329),
	.val = vga_gc0329
};
static struct sensor_reg_list gc0329_qvga = {
	.size = ARRAY_ROW(qvga_gc0329),
	.val = qvga_gc0329
};
static struct sensor_reg_list gc0329_qcif = {
	.size = ARRAY_ROW(qcif_gc0329),
	.val = qcif_gc0329
};
static struct sensor_reg_list gc0329_qqvga = {
	.size = ARRAY_ROW(qqvga_gc0329),
	.val = qqvga_gc0329
};
static struct sensor_win_size gc0329_win_size[] = {
	WIN_SIZE("VGA", W_VGA, H_VGA, &gc0329_vga),
	WIN_SIZE("QVGA", W_QVGA, H_QVGA, &gc0329_qvga),
	WIN_SIZE("QCIF", W_QCIF, H_QCIF, &gc0329_qcif),
	WIN_SIZE("QQVGA", W_QQVGA, H_QQVGA, &gc0329_qqvga),
};

static struct sensor_win_cfg gc0329_win_cfg = {
	.num = ARRAY_ROW(gc0329_win_size),
	.win_size = gc0329_win_size
};

static struct sensor_csi_cfg gc0329_csi_cfg = {
	.csi_en = false,
	.d_term_en = 0,
	.c_term_en = 0,
	.dhs_settle = 0,
	.chs_settle = 0,
};

static struct sensor_info gc0329_info = {
	.name		= "gc0329",
	.chip_id	= 0xc0,
	.mclk		= 26,
	.i2c_addr	= 0x31,
	.exp_def	= 0,
	.awb_def	= 1,
	.rst_act_h	= false,
	.pdn_act_h	= true,
	.init		= &gc0329_init,
	.win_cfg	= &gc0329_win_cfg,
	.csi_cfg	= &gc0329_csi_cfg
};

extern void sensor_power_down(bool high, bool acth, int id);
extern void sensor_reset(bool rst, bool acth);
extern void sensor_clock(bool out, int mclk);
extern void sensor_read(const u16 addr, u8 *data, u8 bits);
extern void sensor_write(const u16 addr, const u8 data, u8 bits);
extern void sensor_write_group(struct sensor_reg* reg, u32 size);

static u32 gc0329_power(int id, int mclk, bool rst_h, bool pdn_h)
{
	/* set state to power off */
	sensor_power_down(true, pdn_h, 0);
	mdelay(1);
	sensor_power_down(true, pdn_h, 1);
	mdelay(1);
	sensor_reset(true, rst_h);
	mdelay(1);
	sensor_clock(false, mclk);
	mdelay(5);

	/* power on sequence */
	sensor_clock(true, mclk);
	mdelay(1);
	sensor_power_down(false, pdn_h, id);
	mdelay(1);
	sensor_reset(false, rst_h);
	mdelay(10);

	return 0;
}

static u32 gc0329_get_chipid(void)
{
	u8 chip_id = 0;

	sensor_write(0xfc, 0x16, BIT);
	mdelay(10);
	sensor_read(0x00, &chip_id, BIT);

	return chip_id;
}

static u32 gc0329_get_lum(void)
{
	u8 val = 0;
	u32 ret = 0;

	sensor_write(0xfe, 0x01, BIT);
	sensor_read(0x14, &val, BIT);
	sensor_write(0xfe, 0x00, BIT);

	if (val < 0x30)
		ret = 1;

	return ret;
}

#define GC0329_FLIP_BASE	0x17
#define GC0329_H_FLIP_BIT	0
#define GC0329_V_FLIP_BIT	1
static void gc0329_set_flip(int hv, int flip)
{
	u8 tmp = 0;

	sensor_read(GC0329_FLIP_BASE, &tmp, BIT);

	if (hv) {
		if (flip)
			tmp |= (0x1 << GC0329_V_FLIP_BIT);
		else
			tmp &= ~(0x1 << GC0329_V_FLIP_BIT);
	}
	else {
		if (flip)
			tmp |= (0x1 << GC0329_H_FLIP_BIT);
		else
			tmp &= ~(0x1 << GC0329_H_FLIP_BIT);
	}

	sensor_write(GC0329_FLIP_BASE, tmp, BIT);
}

#define GC0329_EXP_ROW		ARRAY_ROW(exp_gc0329)
#define GC0329_EXP_COL		ARRAY_COL(exp_gc0329)
static void gc0329_set_exp(int exp)
{
	int key = exp + (GC0329_EXP_ROW / 2);
	if ((key < 0) || (key > (GC0329_EXP_ROW - 1)))
		return;

	sensor_write_group(exp_gc0329[key], GC0329_EXP_COL);
}

#define GC0329_AWB_ROW		ARRAY_ROW(awb_gc0329)
#define GC0329_AWB_COL		ARRAY_COL(awb_gc0329)
static void gc0329_set_awb(int awb)
{
	if ((awb < 0) || (awb > (GC0329_AWB_ROW - 1)))
		return;

	sensor_write_group(awb_gc0329[awb], GC0329_AWB_COL);
}

static struct sensor_ops gc0329_ops = {
	.power		= gc0329_power,
	.get_chipid	= gc0329_get_chipid,
	.get_lum	= gc0329_get_lum,
	.set_flip	= gc0329_set_flip,
	.set_exp	= gc0329_set_exp,
	.set_awb	= gc0329_set_awb,
	.start		= NULL,
	.stop		= NULL
};

struct sensor_dev gc0329_dev = {
	.info	= &gc0329_info,
	.ops	= &gc0329_ops,
};

#undef BIT
#endif
